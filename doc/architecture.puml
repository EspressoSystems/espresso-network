@startuml

skinparam package<<Layout>> {
  borderColor Transparent
  backgroundColor Transparent
  fontColor Transparent
  stereotypeFontColor Transparent
}

package "Espresso Sequencer Network" as Network #MistyRose {
    package CDNLayout <<Layout>> {
        component "Other\nSequencer\nNodes" as Nodes
        package CDN {
            component Broker
            component Marshal
            database KeyDB
        }
    }

    'CDN Layout
    Broker -> KeyDB: state
    KeyDB -> Marshal: state
    Nodes <--> CDN: consensus\nmessages
    note top of link
        4. HotShot consensus
    end note

    component "Sequencer Node" as Seq #Bisque {
        database "Postgres" as DB
        package APIs #LightCyan {
            component "Submit" as Submit
            component "Hotshot\nEvents\nStream\n" as EventsStream
            component "Catchup" as Catchup
            component "Status"
            component "Query" as Query
        }
        package HotShot {
            component "Networking"{
                component Libp2p
                component "CDN Client"
            }
            Libp2p -[hidden]left-> "CDN Client"
            component "HotShot Events" as Events
        }

        package State as State {
            component "State Signer" as Signer
            component "ValidatedState" as Validated
        }
    }
    component "HotShot state\nprover service" as HSProver
    component "HotShot state\nrelay service" as Relay
    component "Builder" as Builder
}

' Network
Nodes --> Catchup: " " "missing\nstate"
Nodes <--> Libp2p: consensus\nmessages
"CDN Client" <--> CDN: consensus\nmessages

' HotShot state
Signer -down-> Relay: state,\nsignature
note top of link
    5. HotShot proving
end note
Relay --> HSProver: state,\nsignature bundle

' Builder
Builder --> HotShot: espresso block
note top of link
    3. Leader obtains block
end note
EventsStream -> Builder: transactions

' Events
Networking -> Events
Events -up-> EventsStream
Events -down-> Validated

' Storage
Query --> DB
Validated -up-> DB
Catchup --> DB

package "Layer 2s / Rollups" as L2s #LightYellow {
    component "Rollup N" as L2 {
        component "API (e.g. JSON-RPC)" as L2_RPC
        component Executor as L2_Exec
        component Prover as L2_Prover
        database "State DB" as L2_State
    }
}
package "Ethereum Layer 1" as L1 #LightGray {
    package "Espresso Contracts" as Esp_L1 {
        component "Light Client\nContract" as LC_L1
        component "Fee\nContract" as Fee_L1
    }
    package "Rollup Contracts" {
        component "Rollup N\nContract" as L2_L1
    }
}

' Transaction submission
entity User
User -Up-> L2_RPC : transactions,\nstate queries
note top of link
    2. Transaction submission
end note
L2_RPC --> Submit : "transaction\nNamespaceId Rollup N" " "
Query -up-> L2_Exec : " " "Block\n(sequenced transactions)"

' L1 details
HSProver -down-> LC_L1 : HotShot\nstate\nproof
L2_Prover -> L2_L1 : rollup state proof
note top of link
    6. Rollup proving
end note
LC_L1 -> L2_L1 : HotShot\ncommitment

' L2 details
L2_RPC <-up- L2_State : Read state
L2_Exec -up-> L2_State : Write state
L2_Prover <-up- L2_State : Read State

Builder --> Fee_L1: deposit\nether
note top of link
    1. Fee deposit
end note
Fee_L1 -up-> Validated: fee\ndeposits

@enduml
