@startuml

package "Espresso Sequencer Network" as Network #MistyRose {
    component "Other\nSequencer\nNodes" as Nodes
    package CDN {
        component Broker
        component Marshal
        database KeyDB
    }

    'CDN Layout
    Broker -> KeyDB: state
    KeyDB -> Marshal: state

    component "Sequencer Node" as Seq #Bisque {
        database "Postgres" as DB
        package APIs #LightCyan {
            component "Submit" as Submit
            component "Hotshot\nEvents\nStream\n" as EventsStream
            component "Catchup" as Catchup
            component "Status"
            component "Query" as Query
        }
        package HotShot {
            component "Networking"{
                component Libp2p
                component "CDN Client"
            }
            component "HotShot Events" as Events
        }

        package State as State {
            component "State Signer" as Signer
            component "ValidatedState" as Validated
        }
    }
    component "HotShot state\nprover service" as HSProver
    component "HotShot state\nrelay service" as Relay
    component "Builder" as Builder
}

' Network
Nodes <-up- Catchup: "missing\nstate" " "
Nodes <-> Libp2p: consensus\nmessages
"CDN Client" <--> CDN: consensus\nmessages
Nodes <--> CDN: consensus\nmessages
note top of link
    4. HotShot consensus
end note

' HotShot state
Signer --> Relay: state, signature
note top of link
    6. HotShot proving
end note
Relay -> HSProver: state,\nsignature bundle

' Builder
Builder --> HotShot: Espresso block
note top of link
    3. Leader
    obtains
    Espresso
    block
end note
EventsStream -> Builder: transactions

' Events
Networking <-up-> Events
Events -up-> EventsStream: events
Events -down-> Validated

' Storage
Query --> DB
Validated -up-> DB
DB --> Catchup: missing\nstate

package "Layer 2s / Rollups" as L2s #LightYellow {
    component "zk Rollup Z" as ZK #LightBlue {
        component "API (e.g. JSON-RPC)" as ZK_RPC
        component Executor as ZK_Exec
        component Prover as ZK_Prover
        ZK_RPC --[hidden]> ZK_Exec
        ZK_RPC --[hidden]> ZK_Prover
    }
    component "Optimistic Rollup O" #LightGreen {
        component "API (e.g. JSON-RPC)" as OR_RPC
        component Proposer
        component Challenger
        OR_RPC --[hidden]> Proposer
        OR_RPC --[hidden]> Challenger
    }
}
package "Ethereum Layer 1" as L1 #LightGray {
    package "Espresso Contracts" as Esp_L1 {
        component "Light Client\nContract" as LC_L1
        component "Fee\nContract" as Fee_L1
    }
    package "Rollup Contracts" {
        component "zk Rollup Z\nContract" as ZK_L1
        component "OR Rollup O\nContract" as OR_L1
    }
}

' Transaction submission
entity User
User --> ZK_RPC : rollup transaction,\nstate queries
note top of link
    2. Transaction submission
end note
User --> OR_RPC

ZK_RPC --> Submit : "transaction" " "
Submit -> Events: transaction
Query -up-> ZK_Exec : " " "Espresso\nheader,\nnamespace\ntransactions"
note top of link
    5. Rollup
    block
    production
end note
Query -up-> Proposer: " " "Espresso\nheader,\nnamespace\ntransactions"


' L1 details
HSProver -up-> LC_L1 : HotShot\nstate\nproof
LC_L1 -up-> ZK_L1 : " " "HotShot\ncommitment"
LC_L1 -up-> OR_L1 : " " "HotShot\ncommitment"

' ZK proof
ZK_Prover --> ZK_L1 : rollup state proof
note top of link
    7. ZK Rollup
    proving
end note

' OR dispute
Proposer --> OR_L1: respond
Challenger --> OR_L1: challenge
note top of link
    8. OR dispute
end note

Builder -> Fee_L1: deposit\nether
note top of link
    1. Fee
    deposit
end note
Fee_L1 --> Validated: fee\ndeposits

@enduml
