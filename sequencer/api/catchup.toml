[route.account]
PATH = ["/:height/:view/account/:address"]
":height" = "Integer"
":view" = "Integer"
":address" = "Literal"
DOC = """
Get the fee account balance for `address`.

This endpoint can be used to catch up to the current state from a recent state by fetching the
balance (with proof) at the given block `:height` and `:view` number. `:height` and `:view` _must_
correspond! `:height` is provided to simplify lookups for backends where data is not indexed by
view.

This endpoint is intended to be used for catchup, so `:view` should be no older than the last
decided view.

Returns the account balance and a Merkle proof relative to the fee state root at the requested
height and view. If there is no entry for this account in the requested fee state (note: this is
distinct from the server _not knowing_ the entry for this account), the returned balance is 0 and
the proof is a Merkle _non-membership_ proof.

```
{
    "balance": "integer",
    "proof": { ... },
}
```
"""

[route.accounts]
PATH = ["/:height/:view/accounts"]
":height" = "Integer"
":view" = "Integer"
METHOD = "POST"
DOC = """
Bulk version of `/:height/:view/account`. The request body should be a JSON array consisting of
TaggedBase64-encoded fee accounts.

The response is a `FeeMerkleTree` containing sub-trees for each of the requested accounts, which is
a more condensed way to represent the union of account proofs for each requested account. Individual
Merkle proofs for each account can be extracted from this tree.
"""

[route.blocks]
PATH = ["/:height/:view/blocks"]
":height" = "Integer"
":view" = "Integer"
DOC = """
Get the blocks Merkle tree frontier.

This endpoint can be used to catch up to the current state from a recent state by fetching the
frontier at the given block `:height` and `:view` number. `:height` and `:view` _must_ correspond!
`:height` is provided to simplify lookups for backends where data is not indexed by view.

This endpoint is intended to be used for catchup, so `:view` should be no older than the last
decided view.

Returns the blocks Merkle tree frontier -- the path to the most recently appended leaf, relative to
root node at the requested block height and view.
"""

[route.chainconfig]
PATH = ["/chain-config/:commitment"]
":commitment" = "TaggedBase64"
DOC = """

This endpoint retrieves the chain config from a peer that matches the specified `:commitment`.
This is only called when the state does not have full chain config which is different from the genesis one.
This can happen if the node missed a protocol upgrade.

Returns the chain config -- this includes parameters such as `max_block_size`, `chain_id`, `base_fee`, and `fee_recipient`.
"""

[route.leafchain]
PATH = ["/:height/leafchain"]
":height" = "Integer"
DOC = """

This Endpoint fetches a leaf chain which decides a specified block height.  This endpoint should be used
For catching up the stake table, where `:height` is the block height of the epoch root you want to catchup to

Returns a list of leaves which includes `:height` as the last leaf and should prove the block with `:height` was decided.  
"""