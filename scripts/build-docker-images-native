#!/usr/bin/env bash
#
# Used to build docker images in a quick way for local testing.
#
# The build is done inside a docker container.
#
# Usage: scripts/build-docker-images-native <extra args to cargo build>
#
set -euo pipefail

CARGO_BUILD_ARGS="${@:---release}"

# Check kernel
case $(uname -s) in
  Linux)
    ;;
  Darwin)
    ;;
  *)
    echo "This script is only supported on Linux and Darwin"
    exit 1
    ;;
esac

# Check architecture
case $(uname -m) in
  x86_64)
    ARCH=amd64
    PLATFORM=linux/amd64
    ;;
  arm64)
    ARCH=arm64
    PLATFORM=linux/arm64
    ;;
  *)
    echo "Machine type $(uname -m) is not supported."
    exit 1
    ;;
esac

# Compile binaries

# Use a different target directory for docker builds to avoid conflicts with
# native builds.
CARGO_TARGET_DIR=target/docker
CARGO_HOME="${CARGO_HOME:-$HOME/.cargo}"

# Pull our latest devops-rust image. Using an older image may cause a failing
# rustup channels sync.
docker pull rust

# Build in docker container:
#   - CARGO_TARGET_DIR is set to point to the location where the hosts
#     CARGO_TARGET_DIR is mounted.
#   - PWD is mounted to /work.
#   - Cargo registry and git directory are mounted to avoid re-downloading
#     dependencies.
docker run \
  -e CARGO_TARGET_DIR=/work/$CARGO_TARGET_DIR \
  -v "$(pwd):/work" \
  -v "$CARGO_HOME/registry:/usr/local/cargo/registry" \
  -v "$CARGO_HOME/git:/usr/local/cargo/git" \
  -it rust \
  bash -c "cd /work \
  && git config --global --add safe.directory /work \
  && cargo build --message-format json $CARGO_BUILD_ARGS > $CARGO_TARGET_DIR/build.json \
  && cargo build --message-format json --bin espresso-dev-node --features 'embedded-db testing' $CARGO_BUILD_ARGS >> $CARGO_TARGET_DIR/build.json \
  && cargo build --message-format json --manifest-path ./sequencer-sqlite/Cargo.toml $CARGO_BUILD_ARGS >> $CARGO_TARGET_DIR/build.json"

# Copy binaries to a temporary directory.
WORKDIR=$(mktemp -d -t espresso-docker-build-XXXXXXXX)

trap "exit" INT TERM
trap cleanup EXIT
cleanup(){
    rm -rfv "${WORKDIR}"
}

# Copy data files to Docker context.
mkdir -p ${WORKDIR}/data
cp -rv data/genesis ${WORKDIR}/data/

mapfile -t binaries < <(
  jq -r 'select((.reason == "compiler-artifact") and .target.kind[0] == "bin") | .filenames[0]' $CARGO_TARGET_DIR/build.json |
  grep -o 'target/.*'
)
# exit if no binaries are found
if [ ${#binaries[@]} -eq 0 ]; then
  echo "No binaries found"
  exit 1
fi

# Always copy to release subfolder because that's what our dockerfiles expect
mkdir -p "${WORKDIR}/target/$ARCH/release"
for binary in "${binaries[@]}"; do
  cp -v "$binary" "${WORKDIR}/target/$ARCH/release"
done

mkdir -p "${WORKDIR}/docker/scripts"
cp -v docker/scripts/sequencer-awssecretsmanager.sh "${WORKDIR}/docker/scripts"

# Copy the dev-node and sequencer-entrypoint script
mkdir -p "${WORKDIR}/scripts"
cp -v scripts/sequencer-entrypoint "${WORKDIR}/scripts/"

export DOCKER_BUILDKIT=1
images=(
 bridge
 builder
 cdn-broker
 cdn-marshal
 cdn-whitelist
 deploy
 espresso-dev-node
 nasty-client
 node-validator
 orchestrator
 prover-service
 sequencer
 state-relay-server
 staking-cli
 submit-transactions
)
for image in "${images[@]}"; do
  docker build --platform $PLATFORM -t ghcr.io/espressosystems/espresso-sequencer/$image:main -f docker/$image.Dockerfile "$WORKDIR"
done
