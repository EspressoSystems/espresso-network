#!/usr/bin/env bash
if [[ "$(uname -s)" != "Linux" ]]; then
  echo "This script only works on Linux."
  echo "On macOS, use scripts/build-docker-images-native instead."
  exit 1
fi

set -euxo pipefail

nix develop .#crossShell --ignore-environment --command bash -c "cargo build --release \
&& cargo build --release --manifest-path ./sequencer-sqlite/Cargo.toml \
&& cargo build --bin espresso-dev-node --release --features='testing embedded-db'"

nix develop .#armCrossShell --ignore-environment --command bash -c "cargo build --release \
&& cargo build --release --manifest-path ./sequencer-sqlite/Cargo.toml \
&& cargo build --bin espresso-dev-node --release --features='testing embedded-db'"

# The rest of the script doesn't run in a nix shell but we need to know where
# the binaries are.
CARGO_TARGET_DIR="./target/nix"

# Copy binaries to a temporary directory.
WORKDIR=$(mktemp -d -t espresso-docker-build-XXXXXXXX)

trap "exit" INT TERM
trap cleanup EXIT
cleanup(){
    rm -rfv ${WORKDIR}
}

# Copy data files to Docker context.
mkdir -p ${WORKDIR}/data
cp -rv data/genesis ${WORKDIR}/data/

binaries=(
  cdn-broker
  cdn-marshal
  cdn-whitelist
  deploy
  dev-rollup
  espresso-bridge
  espresso-dev-node
  keygen
  marketplace-builder
  marketplace-solver
  nasty-client
  node-metrics
  orchestrator
  permissionless-builder
  pub-key
  reset-storage
  sequencer
  sequencer-sqlite
  state-prover
  state-relay-server
  staking-cli
  submit-transactions
  utils
)

for ARCH in "amd64" "arm64"; do
  case "$ARCH" in
    amd64)
      TARGET=x86_64-unknown-linux-musl
      ;;
    arm64)
      TARGET=aarch64-unknown-linux-musl
      ;;
    *)
      echo "Unknown arch: $ARCH"
      exit 1
      ;;
  esac
  mkdir -p ${WORKDIR}/target/$ARCH/release
  for binary in "${binaries[@]}"; do
    cp -v "${CARGO_TARGET_DIR}/${TARGET}/release/$binary" ${WORKDIR}/target/$ARCH/release
  done
done

mkdir -p ${WORKDIR}/docker/scripts
cp -v docker/scripts/sequencer-awssecretsmanager.sh ${WORKDIR}/docker/scripts

# Copy the dev-node and sequencer script
mkdir -p ${WORKDIR}/scripts
cp -v scripts/sequencer-entrypoint ${WORKDIR}/scripts

export DOCKER_BUILDKIT=1
images=(
 bridge
 builder
 cdn-broker
 cdn-marshal
 cdn-whitelist
 deploy
 dev-rollup
 espresso-dev-node
 marketplace-builder
 marketplace-solver
 nasty-client
 node-validator
 orchestrator
 prover-service
 sequencer
 state-relay-server
 staking-cli
 submit-transactions
)
for image in "${images[@]}"; do
  docker build --platform $PLATFORM -t ghcr.io/espressosystems/espresso-sequencer/$image:main -f docker/$image.Dockerfile ${WORKDIR}
done
