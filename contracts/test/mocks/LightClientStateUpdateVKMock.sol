// SPDX-License-Identifier: GPL-3.0-or-later
//
// Copyright (c) 2023 Espresso Systems (espressosys.com)
// This file is part of the Espresso Sequencer project.
//
// This program is free software: you can redistribute it and/or modify it under the terms of the
// GNU General Public License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
// even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
// You should have received a copy of the GNU General Public License along with this program. If
// not, see <https://www.gnu.org/licenses/>.

// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-contract --release`.
pragma solidity ^0.8.0;

import { IPlonkVerifier } from "../../src/interfaces/IPlonkVerifier.sol";

/* solhint-disable no-inline-assembly */

library LightClientStateUpdateVKMock {
    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {
        assembly {
            // domain size
            mstore(vk, 65536)
            // num of public inputs
            mstore(add(vk, 0x20), 7)

            // sigma0
            mstore(
                mload(add(vk, 0x40)),
                17784680725023327951188936399986460020762209085510683405633149788637144161393
            )
            mstore(
                add(mload(add(vk, 0x40)), 0x20),
                11212015166526635943045465868338638499911491446609160661595934216855261873574
            )
            // sigma1
            mstore(
                mload(add(vk, 0x60)),
                6325774313707242735646548691526435421082374832307113845436686132555853756612
            )
            mstore(
                add(mload(add(vk, 0x60)), 0x20),
                10846680413645115382039030032666053857253424558694372714070573623020112628754
            )
            // sigma2
            mstore(
                mload(add(vk, 0x80)),
                11580099292468241927985242726032422689155528399124740141328212808132618509204
            )
            mstore(
                add(mload(add(vk, 0x80)), 0x20),
                1102631722245674673738213405369275394904392521575266516943525096123533543499
            )
            // sigma3
            mstore(
                mload(add(vk, 0xa0)),
                5948105401239062352401320398191544553559741465341827233854601409409396284676
            )
            mstore(
                add(mload(add(vk, 0xa0)), 0x20),
                12347735920400466266714621383504991648202431553052289730704781019769915421768
            )
            // sigma4
            mstore(
                mload(add(vk, 0xc0)),
                8332583168656165572811797451778957662845078074901959312951221289420577584476
            )
            mstore(
                add(mload(add(vk, 0xc0)), 0x20),
                9981335732648752860673917223050612108350735866528000308155020025109900405760
            )

            // q1
            mstore(
                mload(add(vk, 0xe0)),
                6823010917778669173140873404487404278604783392462148194447942340999274739653
            )
            mstore(
                add(mload(add(vk, 0xe0)), 0x20),
                11381059262206464182360910687007881361112168841062659246465729950191304771642
            )
            // q2
            mstore(
                mload(add(vk, 0x100)),
                16467522461216018100963279612271964489665235665459338781751317498946176225612
            )
            mstore(
                add(mload(add(vk, 0x100)), 0x20),
                11105018050438151081247179504826409757895927256937226225703397960639133094552
            )
            // q3
            mstore(
                mload(add(vk, 0x120)),
                19480020242213934793929173675550372256836430146795272925917172147277292317652
            )
            mstore(
                add(mload(add(vk, 0x120)), 0x20),
                19815321676545765124350182519670380771145228481719073592104119487883626028317
            )
            // q4
            mstore(
                mload(add(vk, 0x140)),
                12451268414456483335192676236876364192596187232316345821297232475470103974422
            )
            mstore(
                add(mload(add(vk, 0x140)), 0x20),
                11682146569787576439745067258705529842421447486344696073107809405476775884727
            )

            // qM12
            mstore(
                mload(add(vk, 0x160)),
                20709857461714093001568075231473274577824845800290804735221155307589067356034
            )
            mstore(
                add(mload(add(vk, 0x160)), 0x20),
                12565457458095489499845372823598051639603655295729933067993879693841776938525
            )
            // qM34
            mstore(
                mload(add(vk, 0x180)),
                3330549217681833139508447431816654825643904720067373932891668504715476977244
            )
            mstore(
                add(mload(add(vk, 0x180)), 0x20),
                10081930336963130561802413792408779203057577983205921072927574344657681596928
            )

            // qO
            mstore(
                mload(add(vk, 0x1a0)),
                3732677866412476453461223139761089616472675078093647739705819067388742594399
            )
            mstore(
                add(mload(add(vk, 0x1a0)), 0x20),
                13205742749850037207524830374555639359830338945132245043809962874892930086176
            )
            // qC
            mstore(
                mload(add(vk, 0x1c0)),
                6079118882463682237316320136128645508497018363191690463740627036242926209624
            )
            mstore(
                add(mload(add(vk, 0x1c0)), 0x20),
                2291620668035293913811588244099079239012879093094241809363370700564859851033
            )
            // qH1
            mstore(
                mload(add(vk, 0x1e0)),
                2535043492997131312365045968716533508346000117790510936317564378781751747172
            )
            mstore(
                add(mload(add(vk, 0x1e0)), 0x20),
                2557092926415852756909600964440676455882341807219087789256035156638906043449
            )
            // qH2
            mstore(
                mload(add(vk, 0x200)),
                21592594974838534357389253757278091424800053345635439842793735732321179097410
            )
            mstore(
                add(mload(add(vk, 0x200)), 0x20),
                9333373253464374109367809242418294357483323556244659188072540872929872168083
            )
            // qH3
            mstore(
                mload(add(vk, 0x220)),
                14112992036224420022673540292714706666202699585254677101215659271776592058721
            )
            mstore(
                add(mload(add(vk, 0x220)), 0x20),
                21439131670379640408824642398148788105826702393263073411676386476858408431505
            )
            // qH4
            mstore(
                mload(add(vk, 0x240)),
                3725641509223307373366764431044718501089356259249471069735697776587448972390
            )
            mstore(
                add(mload(add(vk, 0x240)), 0x20),
                11360183507887279313142125482306836500780320192339665220922476805216329862873
            )
            // qEcc
            mstore(
                mload(add(vk, 0x260)),
                16831768412946363133627504446422006413358359699907210504074775005819331761298
            )
            mstore(
                add(mload(add(vk, 0x260)), 0x20),
                21642816872279233337458356300468471335414101027343599420060030747728275713256
            )
            // g2LSB
            mstore(
                add(vk, 0x280), 0xb0838893ec1f237e8b07323b0744599f4e97b598b3b589bcc2bc37b8d5c41801
            )
            // g2MSB
            mstore(
                add(vk, 0x2A0), 0xc18393c0fa30fe4e8b038e357ad851eae8de9107584effe7c7f1f651b2010e26
            )
        }
    }
}
