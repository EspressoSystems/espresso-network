// SPDX-License-Identifier: GPL-3.0-or-later
//
// Copyright (c) 2023 Espresso Systems (espressosys.com)
// This file is part of the Espresso Sequencer project.
//
// This program is free software: you can redistribute it and/or modify it under the terms of the
// GNU General Public License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
// even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
// You should have received a copy of the GNU General Public License along with this program. If
// not, see <https://www.gnu.org/licenses/>.

// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-contract --release`.
pragma solidity ^0.8.0;

import { IPlonkVerifier } from "../interfaces/IPlonkVerifier.sol";

/* solhint-disable no-inline-assembly */

library LightClientStateUpdateVK {
    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {
        assembly {
            // domain size
            mstore(vk, 1048576)
            // num of public inputs
            mstore(add(vk, 0x20), 7)

            // sigma0
            mstore(
                mload(add(vk, 0x40)),
                16043392748105542250304322824810370020021025564942427718474950685092675841954
            )
            mstore(
                add(mload(add(vk, 0x40)), 0x20),
                19135284366657833628354977949371490269920872528386804828338183734933915063463
            )
            // sigma1
            mstore(
                mload(add(vk, 0x60)),
                2778717324330498744994531263702315244149678900961828222283402152593904107675
            )
            mstore(
                add(mload(add(vk, 0x60)), 0x20),
                16759366415806200391095504905464812555509135295738337106253912320243246018937
            )
            // sigma2
            mstore(
                mload(add(vk, 0x80)),
                6220330596615226723642438930205134518711246397122520386233799907528379013596
            )
            mstore(
                add(mload(add(vk, 0x80)), 0x20),
                8344958809262021811929679424186961192688788615559223638884967520276027016395
            )
            // sigma3
            mstore(
                mload(add(vk, 0xa0)),
                7952811448742934474128215788861604894182577909950573256881248636552173771199
            )
            mstore(
                add(mload(add(vk, 0xa0)), 0x20),
                20500159975945184586417129168820991334637018612773612287842415693151993758760
            )
            // sigma4
            mstore(
                mload(add(vk, 0xc0)),
                10296671863931908571056025645132677298697792048312748314247297091242497167101
            )
            mstore(
                add(mload(add(vk, 0xc0)), 0x20),
                14487321642141254557263069781234760963154849825884844778816524063348598567049
            )

            // q1
            mstore(
                mload(add(vk, 0xe0)),
                7758833542876569127261238805250663426100336271670929506591434105603119717827
            )
            mstore(
                add(mload(add(vk, 0xe0)), 0x20),
                3847980651474203698351602471244791446829358454627973590875164935356920412957
            )
            // q2
            mstore(
                mload(add(vk, 0x100)),
                9277076569845583759629501106958656611791077602517098829558737012728982332382
            )
            mstore(
                add(mload(add(vk, 0x100)), 0x20),
                442283620081484392522390233257214501417811361363792609544757268467188182859
            )
            // q3
            mstore(
                mload(add(vk, 0x120)),
                4678354727148314768583368011442986799904545609212135187355874282069755187556
            )
            mstore(
                add(mload(add(vk, 0x120)), 0x20),
                11239540448038284734601875871911558572979722253259682483359467915957118547606
            )
            // q4
            mstore(
                mload(add(vk, 0x140)),
                19795855070701456519856289246107606667286081050354689801132498355098877250588
            )
            mstore(
                add(mload(add(vk, 0x140)), 0x20),
                7486832458658187317275572122161344331029297565191850558196052941108256950480
            )

            // qM12
            mstore(
                mload(add(vk, 0x160)),
                15258708840140408534057880342484090317487134490781304521604654158159692661694
            )
            mstore(
                add(mload(add(vk, 0x160)), 0x20),
                2684189309724513706861143955683980707183027467486121633924046346673706699241
            )
            // qM34
            mstore(
                mload(add(vk, 0x180)),
                20204605388553534621522300111279473013506461170995450431955470728233298617583
            )
            mstore(
                add(mload(add(vk, 0x180)), 0x20),
                20667860155429666628752166675435907067937684456207285708587770630418366377348
            )

            // qO
            mstore(
                mload(add(vk, 0x1a0)),
                20001416105877927202901579747864018649895183788011637572138305596074976602376
            )
            mstore(
                add(mload(add(vk, 0x1a0)), 0x20),
                19528436190309610113547469449976708739079126597255604268425501554938355526882
            )
            // qC
            mstore(
                mload(add(vk, 0x1c0)),
                20482873589297055931625799341900159582543895173558170170584514916029179712769
            )
            mstore(
                add(mload(add(vk, 0x1c0)), 0x20),
                16386801470684282089941433984161903425938200748129533869396840661293226216717
            )
            // qH1
            mstore(
                mload(add(vk, 0x1e0)),
                1960884119254066702392602328821638986229496749601689484863310054626771192849
            )
            mstore(
                add(mload(add(vk, 0x1e0)), 0x20),
                6966409033516919499274932822727395736487830106099489183848257044616164644964
            )
            // qH2
            mstore(
                mload(add(vk, 0x200)),
                19753440871621787440428381199327465770585928335388367352727113355846992655252
            )
            mstore(
                add(mload(add(vk, 0x200)), 0x20),
                11026377003353031626858906742565594946968872706038673353464112313773276980972
            )
            // qH3
            mstore(
                mload(add(vk, 0x220)),
                5448915697208493401615649328992224252292638718144982802779361343669178673414
            )
            mstore(
                add(mload(add(vk, 0x220)), 0x20),
                6085228836821381915568415426008615814705795649793227339139722249659752395983
            )
            // qH4
            mstore(
                mload(add(vk, 0x240)),
                819687199834621753152082039202327894832066894790282585745748408358274702853
            )
            mstore(
                add(mload(add(vk, 0x240)), 0x20),
                19319663644033644630589680099329782677655847333441532334438696245011494104785
            )
            // qEcc
            mstore(
                mload(add(vk, 0x260)),
                3247667238694701634583031584459011661543842409365209666160058601955613754293
            )
            mstore(
                add(mload(add(vk, 0x260)), 0x20),
                16270745764918143312248739566720243316557176152434456136076490117238720935327
            )
            // g2LSB
            mstore(
                add(vk, 0x280), 0xb0838893ec1f237e8b07323b0744599f4e97b598b3b589bcc2bc37b8d5c41801
            )
            // g2MSB
            mstore(
                add(vk, 0x2A0), 0xc18393c0fa30fe4e8b038e357ad851eae8de9107584effe7c7f1f651b2010e26
            )
        }
    }
}
