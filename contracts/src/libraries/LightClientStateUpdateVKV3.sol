// SPDX-License-Identifier: GPL-3.0-or-later
//
// Copyright (c) 2023 Espresso Systems (espressosys.com)
// This file is part of the Espresso Sequencer project.
//
// This program is free software: you can redistribute it and/or modify it under the terms of the
// GNU General Public License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
// even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
// You should have received a copy of the GNU General Public License along with this program. If
// not, see <https://www.gnu.org/licenses/>.

// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-contract --release`.
pragma solidity ^0.8.0;

import { IPlonkVerifier } from "../interfaces/IPlonkVerifier.sol";

/* solhint-disable no-inline-assembly */

library LightClientStateUpdateVKV3 {
    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {
        assembly {
            // domain size
            mstore(vk, 1048576)
            // num of public inputs
            mstore(add(vk, 0x20), 5)

            // sigma0
            mstore(
                mload(add(vk, 0x40)),
                18674069265747007613418591128938593800552289131281561014897113901360989205917
            )
            mstore(
                add(mload(add(vk, 0x40)), 0x20),
                2629445203571147235392590209798726261916619752936317898346025596291224910150
            )
            // sigma1
            mstore(
                mload(add(vk, 0x60)),
                5263034909491850886898359201531483554857863881624090180648661353078368274202
            )
            mstore(
                add(mload(add(vk, 0x60)), 0x20),
                13659904114602011740766956622558468321047312684918590591300706557181174063049
            )
            // sigma2
            mstore(
                mload(add(vk, 0x80)),
                6160302931121379529706847652643352131870716252420317839309652103701913646250
            )
            mstore(
                add(mload(add(vk, 0x80)), 0x20),
                7352724990963757389994426194849915099338586006437265770922062230567822278486
            )
            // sigma3
            mstore(
                mload(add(vk, 0xa0)),
                9664627401410663926258706223616877878140703034691214076164825079664338349662
            )
            mstore(
                add(mload(add(vk, 0xa0)), 0x20),
                9885388598371616599146714058471284382575678916950957226329840798456203931130
            )
            // sigma4
            mstore(
                mload(add(vk, 0xc0)),
                12861938101338850697344779085804062882013840260891608553767695758419408386349
            )
            mstore(
                add(mload(add(vk, 0xc0)), 0x20),
                3263226742738915677076958016051332085519470144306680942099690983448721716904
            )

            // q1
            mstore(
                mload(add(vk, 0xe0)),
                20033627627799312118155291839379305093837102789571612872193971242241482057507
            )
            mstore(
                add(mload(add(vk, 0xe0)), 0x20),
                2608019741510487444967593058522149321662207776747709900970777302606820971372
            )
            // q2
            mstore(
                mload(add(vk, 0x100)),
                15093839099025867302973386356074273909987024800600157573475047305149197972630
            )
            mstore(
                add(mload(add(vk, 0x100)), 0x20),
                13123722251519627404237523617298377306082344772668403034708908252962657668407
            )
            // q3
            mstore(
                mload(add(vk, 0x120)),
                14806463654145142623965489553152997579364302982601445845179894657056833006604
            )
            mstore(
                add(mload(add(vk, 0x120)), 0x20),
                16421737767434697102233479065749296677807268334014928242680708128270459275427
            )
            // q4
            mstore(
                mload(add(vk, 0x140)),
                6428277578459681503255673645977481795412821222517675167128169220685136582067
            )
            mstore(
                add(mload(add(vk, 0x140)), 0x20),
                12240948384627230227237503306303801062270591696799660171793433825424885485321
            )

            // qM12
            mstore(
                mload(add(vk, 0x160)),
                19523131565630392555564929157811703065603137956160516439622180706065283762169
            )
            mstore(
                add(mload(add(vk, 0x160)), 0x20),
                10414026992836414211533030132368490596350716221805162974583025580010176680504
            )
            // qM34
            mstore(
                mload(add(vk, 0x180)),
                7959392304673151989946068046916696602741279868156291046497758856291966574874
            )
            mstore(
                add(mload(add(vk, 0x180)), 0x20),
                2818339073027014342091215285724949083190509518801565334869204276018035725417
            )

            // qO
            mstore(
                mload(add(vk, 0x1a0)),
                16058171861053836973309097753446351313727974530140346134168193193070921031523
            )
            mstore(
                add(mload(add(vk, 0x1a0)), 0x20),
                4852613803537501482997502672883085504983633012116853684342554538311214218913
            )
            // qC
            mstore(
                mload(add(vk, 0x1c0)),
                14027884989106690787161864380106647386489394023015784951894840462321667061234
            )
            mstore(
                add(mload(add(vk, 0x1c0)), 0x20),
                17431701838737580414281229699281771566201617660922029287343782233817960163727
            )
            // qH1
            mstore(
                mload(add(vk, 0x1e0)),
                7774361129709562211112129026331955624600047414574057359362692977451401147623
            )
            mstore(
                add(mload(add(vk, 0x1e0)), 0x20),
                11856835459162396806690836466042720317644179868964252807738264978722442009734
            )
            // qH2
            mstore(
                mload(add(vk, 0x200)),
                4049562140272146504092584962652024512070657279340361392255541166399020292911
            )
            mstore(
                add(mload(add(vk, 0x200)), 0x20),
                20915965544530468052923140771356911082280331458767107936177026318261757993190
            )
            // qH3
            mstore(
                mload(add(vk, 0x220)),
                7255309286468784496637892437618888346705535879256551423952739872773412955346
            )
            mstore(
                add(mload(add(vk, 0x220)), 0x20),
                2600126586172037697599658710512868762832240898731177259825185887731170241514
            )
            // qH4
            mstore(
                mload(add(vk, 0x240)),
                2938694924805617845543127947797260612014728473096175254062714812731697483078
            )
            mstore(
                add(mload(add(vk, 0x240)), 0x20),
                14972312993134243559328626815064825577815153575449655611748798026312028400917
            )
            // qEcc
            mstore(
                mload(add(vk, 0x260)),
                5235358260246172277950939321808111277588907989976790770753546246678990800969
            )
            mstore(
                add(mload(add(vk, 0x260)), 0x20),
                6588805192694351608720166470173691456441591997957251538144944681381468106183
            )
            // g2LSB
            mstore(
                add(vk, 0x280), 0xb0838893ec1f237e8b07323b0744599f4e97b598b3b589bcc2bc37b8d5c41801
            )
            // g2MSB
            mstore(
                add(vk, 0x2A0), 0xc18393c0fa30fe4e8b038e357ad851eae8de9107584effe7c7f1f651b2010e26
            )
        }
    }
}
