// SPDX-License-Identifier: GPL-3.0-or-later
//
// Copyright (c) 2023 Espresso Systems (espressosys.com)
// This file is part of the Espresso Sequencer project.
//
// This program is free software: you can redistribute it and/or modify it under the terms of the
// GNU General Public License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
// even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
// You should have received a copy of the GNU General Public License along with this program. If
// not, see <https://www.gnu.org/licenses/>.

// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-contract --release`.
pragma solidity ^0.8.0;

import { IPlonkVerifier } from "../interfaces/IPlonkVerifier.sol";

/* solhint-disable no-inline-assembly */

library LightClientStateUpdateVKV3 {
    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {
        assembly {
            // domain size
            mstore(vk, 1048576)
            // num of public inputs
            mstore(add(vk, 0x20), 5)

            // sigma0
            mstore(
                mload(add(vk, 0x40)),
                10293108434199129188236304391314121687044340807103235026706194540823795787081
            )
            mstore(
                add(mload(add(vk, 0x40)), 0x20),
                19898409090029251975561423279779070608890151083333903752769965502454178524374
            )
            // sigma1
            mstore(
                mload(add(vk, 0x60)),
                20185423342197794733234643396493928126122298472830111102323588698460499372863
            )
            mstore(
                add(mload(add(vk, 0x60)), 0x20),
                1743630441730963123606161415821694176633810087573865566067806069883510018936
            )
            // sigma2
            mstore(
                mload(add(vk, 0x80)),
                9956355401427985703946800861226036528157872595373460378421359110605069490064
            )
            mstore(
                add(mload(add(vk, 0x80)), 0x20),
                7382896207321058238626407510918367648696021969341834298340326536449988664394
            )
            // sigma3
            mstore(
                mload(add(vk, 0xa0)),
                21732316046187568687347624345209319467295923172893825166055604380484059965691
            )
            mstore(
                add(mload(add(vk, 0xa0)), 0x20),
                21434767181195226746516096320116026918843926150422194677859226253893443762051
            )
            // sigma4
            mstore(
                mload(add(vk, 0xc0)),
                2445020578747841743804804186266315816596710232409598739619343415515314687225
            )
            mstore(
                add(mload(add(vk, 0xc0)), 0x20),
                556122186423368926057194680907156868563370497192735952088953077437458842131
            )

            // q1
            mstore(
                mload(add(vk, 0xe0)),
                7625704093950909884544592379986815542217803620329772209087366399817101671134
            )
            mstore(
                add(mload(add(vk, 0xe0)), 0x20),
                3541732358377351644076118264496999006486292777706644945285217628784873896956
            )
            // q2
            mstore(
                mload(add(vk, 0x100)),
                13806118666427629784270272867244386015077019525198617635596007491435014668484
            )
            mstore(
                add(mload(add(vk, 0x100)), 0x20),
                8350296788839571785830929324637656513317302419627722911090346963567496472050
            )
            // q3
            mstore(
                mload(add(vk, 0x120)),
                17130254483337625454388300426822118968868506170143809815482313166458574274814
            )
            mstore(
                add(mload(add(vk, 0x120)), 0x20),
                2500496696719700079164759627057608038834678914989900909613846675089695160803
            )
            // q4
            mstore(
                mload(add(vk, 0x140)),
                15687135258396484426832768978047830290675720002896882383554643695454689021186
            )
            mstore(
                add(mload(add(vk, 0x140)), 0x20),
                16826751293412311759839127581684282472653526620796270039457864638949014712864
            )

            // qM12
            mstore(
                mload(add(vk, 0x160)),
                8432053397808805059545586364203896890965978825891880696435596731101462396186
            )
            mstore(
                add(mload(add(vk, 0x160)), 0x20),
                17041296204644479137401514128768260614505775049153601312296079054663849483852
            )
            // qM34
            mstore(
                mload(add(vk, 0x180)),
                11474737111089066303556399192662198281696804158383701829357692550864871306355
            )
            mstore(
                add(mload(add(vk, 0x180)), 0x20),
                10159718678504823964046668087731753738159217544300549622640623534355374216229
            )

            // qO
            mstore(
                mload(add(vk, 0x1a0)),
                872816308546810241679636421324321155979941951459911748491320249566218924163
            )
            mstore(
                add(mload(add(vk, 0x1a0)), 0x20),
                12460918515782197176183386098191732967726643573675857360823315512106062929645
            )
            // qC
            mstore(
                mload(add(vk, 0x1c0)),
                1874805269510430222151502056457315616978885747601572966563511963261245695344
            )
            mstore(
                add(mload(add(vk, 0x1c0)), 0x20),
                1214890414458717763683432911359998966255261250874347297969914714514291533511
            )
            // qH1
            mstore(
                mload(add(vk, 0x1e0)),
                18253669447810249892514594070178802299439527434669004216854548040682915365831
            )
            mstore(
                add(mload(add(vk, 0x1e0)), 0x20),
                18191785148052443332384261173175359759596134229083815181273841702938063849940
            )
            // qH2
            mstore(
                mload(add(vk, 0x200)),
                13867503882722918274992314049954109673933231603240361218397799085685950781965
            )
            mstore(
                add(mload(add(vk, 0x200)), 0x20),
                6842944611848486457870367680150449906345831766509807122528686717545246811345
            )
            // qH3
            mstore(
                mload(add(vk, 0x220)),
                7372359611729337365185018499954216118886566668828100866938815783197339308182
            )
            mstore(
                add(mload(add(vk, 0x220)), 0x20),
                17574947303022847084124521128299629272975168696917183154389704662707728627830
            )
            // qH4
            mstore(
                mload(add(vk, 0x240)),
                2413616723691322251733168401514172702146871444412324211663157297406528423732
            )
            mstore(
                add(mload(add(vk, 0x240)), 0x20),
                8194277478066093128853123526551124277661064881924829755407960278147010244565
            )
            // qEcc
            mstore(
                mload(add(vk, 0x260)),
                14000118213499304200356949500369205709844054580767788473033098122363002848041
            )
            mstore(
                add(mload(add(vk, 0x260)), 0x20),
                11990721589588988447376329018329412743440988641721715845329205789056433846234
            )
            // g2LSB
            mstore(
                add(vk, 0x280), 0xb0838893ec1f237e8b07323b0744599f4e97b598b3b589bcc2bc37b8d5c41801
            )
            // g2MSB
            mstore(
                add(vk, 0x2A0), 0xc18393c0fa30fe4e8b038e357ad851eae8de9107584effe7c7f1f651b2010e26
            )
        }
    }
}
