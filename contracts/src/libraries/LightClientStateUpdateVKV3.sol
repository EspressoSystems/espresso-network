// SPDX-License-Identifier: GPL-3.0-or-later
//
// Copyright (c) 2023 Espresso Systems (espressosys.com)
// This file is part of the Espresso Sequencer project.
//
// This program is free software: you can redistribute it and/or modify it under the terms of the
// GNU General Public License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
// even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
// You should have received a copy of the GNU General Public License along with this program. If
// not, see <https://www.gnu.org/licenses/>.

// NOTE: DO NOT MODIFY! GENERATED BY SCRIPT VIA `cargo run --bin gen-vk-contract --release`.
pragma solidity ^0.8.0;

import { IPlonkVerifier } from "../interfaces/IPlonkVerifier.sol";

/* solhint-disable no-inline-assembly */

library LightClientStateUpdateVKV3 {
    function getVk() internal pure returns (IPlonkVerifier.VerifyingKey memory vk) {
        assembly {
            // domain size
            mstore(vk, 1048576)
            // num of public inputs
            mstore(add(vk, 0x20), 5)

            // sigma0
            mstore(
                mload(add(vk, 0x40)),
                11520428775564474245791201553237865009481028317793515940864480302968849944832
            )
            mstore(
                add(mload(add(vk, 0x40)), 0x20),
                11749648435123881405500400409015860731867955359176201657281195000569366462577
            )
            // sigma1
            mstore(
                mload(add(vk, 0x60)),
                13337801136222721201424535856960611936527760047508147305076378116213875072103
            )
            mstore(
                add(mload(add(vk, 0x60)), 0x20),
                10591605974780797001314038056532096319109245661628559651879920165981454864768
            )
            // sigma2
            mstore(
                mload(add(vk, 0x80)),
                13079672488595580467074467587217540175031170437299113398400636902179936299040
            )
            mstore(
                add(mload(add(vk, 0x80)), 0x20),
                8999666752920046750402277892361750820989409985743968147947768889454704530850
            )
            // sigma3
            mstore(
                mload(add(vk, 0xa0)),
                9821571744314557842495715106904603510076170603047485982596991596867796201290
            )
            mstore(
                add(mload(add(vk, 0xa0)), 0x20),
                531527368905473519817797305126242325020643467510744200281088587933519624621
            )
            // sigma4
            mstore(
                mload(add(vk, 0xc0)),
                3720634115679100607604764497050313048917329758845502851783997912132065700678
            )
            mstore(
                add(mload(add(vk, 0xc0)), 0x20),
                21534649726527530245281907571776480038837435312204136657088693573492299203936
            )

            // q1
            mstore(
                mload(add(vk, 0xe0)),
                20786427045775614552852004064713182234598191661968087378473136796816357215551
            )
            mstore(
                add(mload(add(vk, 0xe0)), 0x20),
                2166218097071600787892940672906508384756510150436756678602504196388801687439
            )
            // q2
            mstore(
                mload(add(vk, 0x100)),
                1004219019879898080452851095828918966839160433663688943420748764179413950472
            )
            mstore(
                add(mload(add(vk, 0x100)), 0x20),
                10847931219138970562173044814268745471047544964945297918713730309455615609093
            )
            // q3
            mstore(
                mload(add(vk, 0x120)),
                10788553280411241523138680236518861073574142066355904387102816397423277314922
            )
            mstore(
                add(mload(add(vk, 0x120)), 0x20),
                2022051502949922319730232543613659463755831359828568009569893851001100682397
            )
            // q4
            mstore(
                mload(add(vk, 0x140)),
                14235853008992135662363771271656183258285984075425872339334749447229998765908
            )
            mstore(
                add(mload(add(vk, 0x140)), 0x20),
                18744424005776189589910156011645912893538597885133931412766792109551931719195
            )

            // qM12
            mstore(
                mload(add(vk, 0x160)),
                6164050093042149987673202753778596578108337031597899834348462818621999574298
            )
            mstore(
                add(mload(add(vk, 0x160)), 0x20),
                1078537112956716868206007024850665214407382387235321548510978967770746920039
            )
            // qM34
            mstore(
                mload(add(vk, 0x180)),
                625862090628769634573865806171192514938374648888310315184889933604502222672
            )
            mstore(
                add(mload(add(vk, 0x180)), 0x20),
                6594702015134501851224830134378332299294641212236538502200054175552575842589
            )

            // qO
            mstore(
                mload(add(vk, 0x1a0)),
                19866001137509037161491305296991069837836680059983501298351947001863101686137
            )
            mstore(
                add(mload(add(vk, 0x1a0)), 0x20),
                7379715877118523719826270997830641237778333129258908673364670787688148181583
            )
            // qC
            mstore(
                mload(add(vk, 0x1c0)),
                7555223204914478304899121059116863235304325498974435132096505349735169309948
            )
            mstore(
                add(mload(add(vk, 0x1c0)), 0x20),
                17123310051184270802381527402250267865289250341232299773165086086858394010384
            )
            // qH1
            mstore(
                mload(add(vk, 0x1e0)),
                16913884756464026854589849227467333009432433363360948216264722065136859650628
            )
            mstore(
                add(mload(add(vk, 0x1e0)), 0x20),
                15194256634311920592971425018883199055175698131311314073565130893094766684088
            )
            // qH2
            mstore(
                mload(add(vk, 0x200)),
                13109284878757543170183410727931755098078717218685896060010641081311361090811
            )
            mstore(
                add(mload(add(vk, 0x200)), 0x20),
                4294022648959016015053137260219467692967498110313950007588499460116229675315
            )
            // qH3
            mstore(
                mload(add(vk, 0x220)),
                5564657021851155734572826783585078740563951703546007597423916849225691297877
            )
            mstore(
                add(mload(add(vk, 0x220)), 0x20),
                6821656315389924221537558048628734540317648535592662593476695710341987118199
            )
            // qH4
            mstore(
                mload(add(vk, 0x240)),
                17861936453727336817456412085480695990782767156067619501873649421048330092019
            )
            mstore(
                add(mload(add(vk, 0x240)), 0x20),
                6150814321123039603043533559496864956554672787681719485550548436853940007740
            )
            // qEcc
            mstore(
                mload(add(vk, 0x260)),
                7897080290701498922859528163788926648831828476954842769700528501892012905239
            )
            mstore(
                add(mload(add(vk, 0x260)), 0x20),
                6137502621998099381728810678050242010152891088963360960857857514101435797692
            )
            // g2LSB
            mstore(
                add(vk, 0x280), 0xb0838893ec1f237e8b07323b0744599f4e97b598b3b589bcc2bc37b8d5c41801
            )
            // g2MSB
            mstore(
                add(vk, 0x2A0), 0xc18393c0fa30fe4e8b038e357ad851eae8de9107584effe7c7f1f651b2010e26
            )
        }
    }
}
