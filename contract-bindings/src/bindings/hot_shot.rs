pub use hot_shot::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod hot_shot {
    pub use super::super::shared_types::*;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"InvalidQC\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numBlocks\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"TooManyBlocks\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numBlocks\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"numQCs\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"WrongNumberOfQCs\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstBlockNumber\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"numBlocks\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"NewBlocks\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"MAX_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"struct BN254.G2Point\",\"name\":\"staking_key\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"uint256\",\"name\":\"x0\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"x1\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"y0\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"y1\",\"type\":\"uint256\",\"components\":[]}]},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"addNewStakingKey\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"blockHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"getStakingKey\",\"outputs\":[{\"internalType\":\"struct BN254.G2Point\",\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"uint256\",\"name\":\"x0\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"x1\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"y0\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"y1\",\"type\":\"uint256\",\"components\":[]}]},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newCommitments\",\"type\":\"uint256[]\",\"components\":[]},{\"internalType\":\"bytes[]\",\"name\":\"qcs\",\"type\":\"bytes[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"newBlocks\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"struct BN254.G1Point\",\"name\":\"sig\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\",\"components\":[]}]},{\"internalType\":\"uint256[]\",\"name\":\"bitmap\",\"type\":\"uint256[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"verify_agg_sig\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static HOTSHOT_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(|| {
            ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid")
        });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        8,
        187,
        128,
        97,
        0,
        32,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        125,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        103,
        105,
        35,
        80,
        17,
        97,
        0,
        91,
        87,
        128,
        99,
        103,
        105,
        35,
        80,
        20,
        97,
        0,
        211,
        87,
        128,
        99,
        103,
        162,
        30,
        112,
        20,
        97,
        0,
        230,
        87,
        128,
        99,
        241,
        244,
        93,
        153,
        20,
        97,
        1,
        48,
        87,
        128,
        99,
        244,
        79,
        247,
        18,
        20,
        97,
        2,
        11,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        38,
        131,
        61,
        204,
        20,
        97,
        0,
        130,
        87,
        128,
        99,
        73,
        206,
        137,
        151,
        20,
        97,
        0,
        158,
        87,
        128,
        99,
        80,
        171,
        143,
        142,
        20,
        97,
        0,
        190,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        139,
        97,
        3,
        232,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        139,
        97,
        0,
        172,
        54,
        96,
        4,
        97,
        4,
        185,
        86,
        91,
        96,
        0,
        96,
        32,
        129,
        144,
        82,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        97,
        0,
        209,
        97,
        0,
        204,
        54,
        96,
        4,
        97,
        5,
        232,
        86,
        91,
        97,
        2,
        20,
        86,
        91,
        0,
        91,
        97,
        0,
        209,
        97,
        0,
        225,
        54,
        96,
        4,
        97,
        6,
        252,
        86,
        91,
        97,
        2,
        189,
        86,
        91,
        97,
        0,
        249,
        97,
        0,
        244,
        54,
        96,
        4,
        97,
        4,
        185,
        86,
        91,
        97,
        4,
        37,
        86,
        91,
        96,
        64,
        128,
        81,
        131,
        81,
        129,
        82,
        96,
        32,
        128,
        133,
        1,
        81,
        144,
        130,
        1,
        82,
        131,
        130,
        1,
        81,
        145,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        96,
        146,
        131,
        1,
        81,
        146,
        129,
        1,
        146,
        144,
        146,
        82,
        96,
        128,
        130,
        1,
        82,
        96,
        160,
        1,
        97,
        0,
        149,
        86,
        91,
        97,
        0,
        209,
        97,
        1,
        62,
        54,
        96,
        4,
        97,
        7,
        104,
        86,
        91,
        96,
        3,
        128,
        84,
        96,
        0,
        144,
        129,
        82,
        96,
        2,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        148,
        144,
        148,
        85,
        130,
        84,
        96,
        1,
        129,
        1,
        132,
        85,
        146,
        144,
        145,
        82,
        131,
        81,
        127,
        194,
        87,
        90,
        14,
        158,
        89,
        60,
        0,
        249,
        89,
        248,
        201,
        47,
        18,
        219,
        40,
        105,
        195,
        57,
        90,
        59,
        5,
        2,
        208,
        94,
        37,
        22,
        68,
        111,
        113,
        248,
        91,
        96,
        4,
        144,
        147,
        2,
        146,
        131,
        1,
        85,
        131,
        1,
        81,
        127,
        194,
        87,
        90,
        14,
        158,
        89,
        60,
        0,
        249,
        89,
        248,
        201,
        47,
        18,
        219,
        40,
        105,
        195,
        57,
        90,
        59,
        5,
        2,
        208,
        94,
        37,
        22,
        68,
        111,
        113,
        248,
        92,
        130,
        1,
        85,
        144,
        130,
        1,
        81,
        127,
        194,
        87,
        90,
        14,
        158,
        89,
        60,
        0,
        249,
        89,
        248,
        201,
        47,
        18,
        219,
        40,
        105,
        195,
        57,
        90,
        59,
        5,
        2,
        208,
        94,
        37,
        22,
        68,
        111,
        113,
        248,
        93,
        130,
        1,
        85,
        96,
        96,
        144,
        145,
        1,
        81,
        127,
        194,
        87,
        90,
        14,
        158,
        89,
        60,
        0,
        249,
        89,
        248,
        201,
        47,
        18,
        219,
        40,
        105,
        195,
        57,
        90,
        59,
        5,
        2,
        208,
        94,
        37,
        22,
        68,
        111,
        113,
        248,
        94,
        144,
        145,
        1,
        85,
        86,
        91,
        97,
        0,
        139,
        96,
        1,
        84,
        129,
        86,
        91,
        96,
        0,
        91,
        129,
        129,
        129,
        81,
        129,
        16,
        97,
        2,
        41,
        87,
        97,
        2,
        41,
        97,
        7,
        224,
        86,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        81,
        96,
        0,
        20,
        128,
        21,
        97,
        2,
        64,
        87,
        80,
        129,
        81,
        129,
        16,
        91,
        21,
        97,
        2,
        87,
        87,
        128,
        97,
        2,
        79,
        129,
        97,
        8,
        12,
        86,
        91,
        145,
        80,
        80,
        97,
        2,
        23,
        86,
        91,
        129,
        81,
        129,
        16,
        97,
        2,
        183,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        34,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        116,
        32,
        108,
        101,
        97,
        115,
        116,
        32,
        111,
        110,
        101,
        32,
        107,
        101,
        121,
        32,
        109,
        117,
        115,
        116,
        32,
        98,
        101,
        32,
        115,
        101,
        108,
        101,
        99,
        116,
        101,
        96,
        68,
        130,
        1,
        82,
        97,
        50,
        23,
        96,
        241,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        80,
        80,
        80,
        86,
        91,
        130,
        129,
        20,
        97,
        2,
        231,
        87,
        96,
        64,
        81,
        99,
        99,
        141,
        245,
        209,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        132,
        144,
        82,
        96,
        36,
        129,
        1,
        130,
        144,
        82,
        96,
        68,
        1,
        97,
        2,
        174,
        86,
        91,
        97,
        3,
        232,
        131,
        17,
        21,
        97,
        3,
        13,
        87,
        96,
        64,
        81,
        99,
        224,
        130,
        132,
        11,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        132,
        144,
        82,
        96,
        36,
        1,
        97,
        2,
        174,
        86,
        91,
        96,
        1,
        84,
        96,
        0,
        91,
        132,
        129,
        16,
        21,
        97,
        3,
        228,
        87,
        97,
        3,
        104,
        96,
        1,
        84,
        135,
        135,
        132,
        129,
        129,
        16,
        97,
        3,
        51,
        87,
        97,
        3,
        51,
        97,
        7,
        224,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        53,
        134,
        134,
        133,
        129,
        129,
        16,
        97,
        3,
        76,
        87,
        97,
        3,
        76,
        97,
        7,
        224,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        129,
        1,
        144,
        97,
        3,
        94,
        145,
        144,
        97,
        8,
        37,
        86,
        91,
        96,
        1,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        3,
        139,
        87,
        96,
        1,
        84,
        96,
        64,
        81,
        99,
        120,
        24,
        103,
        25,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        2,
        174,
        145,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        133,
        133,
        130,
        129,
        129,
        16,
        97,
        3,
        157,
        87,
        97,
        3,
        157,
        97,
        7,
        224,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        53,
        96,
        0,
        128,
        96,
        1,
        84,
        129,
        82,
        96,
        32,
        1,
        144,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        32,
        129,
        144,
        85,
        80,
        96,
        1,
        128,
        96,
        0,
        130,
        130,
        84,
        97,
        3,
        206,
        145,
        144,
        97,
        8,
        108,
        86,
        91,
        144,
        145,
        85,
        80,
        97,
        3,
        221,
        144,
        80,
        129,
        97,
        8,
        12,
        86,
        91,
        144,
        80,
        97,
        3,
        19,
        86,
        91,
        80,
        96,
        64,
        128,
        81,
        130,
        129,
        82,
        96,
        32,
        129,
        1,
        134,
        144,
        82,
        127,
        130,
        3,
        162,
        30,
        79,
        149,
        247,
        46,
        80,
        129,
        213,
        224,
        146,
        155,
        26,
        140,
        82,
        20,
        30,
        18,
        63,
        154,
        20,
        225,
        231,
        75,
        2,
        96,
        250,
        95,
        82,
        241,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        4,
        80,
        96,
        64,
        81,
        128,
        96,
        128,
        1,
        96,
        64,
        82,
        128,
        96,
        0,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        129,
        82,
        80,
        144,
        86,
        91,
        96,
        0,
        96,
        3,
        131,
        129,
        84,
        129,
        16,
        97,
        4,
        101,
        87,
        97,
        4,
        101,
        97,
        7,
        224,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        128,
        131,
        32,
        149,
        131,
        82,
        96,
        2,
        128,
        130,
        82,
        96,
        64,
        147,
        132,
        144,
        32,
        84,
        132,
        81,
        96,
        128,
        129,
        1,
        134,
        82,
        96,
        4,
        144,
        148,
        2,
        144,
        151,
        1,
        128,
        84,
        132,
        82,
        96,
        1,
        129,
        1,
        84,
        146,
        132,
        1,
        146,
        144,
        146,
        82,
        129,
        1,
        84,
        146,
        130,
        1,
        146,
        144,
        146,
        82,
        96,
        3,
        144,
        145,
        1,
        84,
        96,
        96,
        130,
        1,
        82,
        147,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        4,
        203,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        22,
        129,
        1,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        97,
        5,
        17,
        87,
        97,
        5,
        17,
        97,
        4,
        210,
        86,
        91,
        96,
        64,
        82,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        64,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        43,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        64,
        81,
        96,
        64,
        129,
        1,
        129,
        129,
        16,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        23,
        21,
        97,
        5,
        78,
        87,
        97,
        5,
        78,
        97,
        4,
        210,
        86,
        91,
        96,
        64,
        82,
        130,
        53,
        129,
        82,
        96,
        32,
        146,
        131,
        1,
        53,
        146,
        129,
        1,
        146,
        144,
        146,
        82,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        130,
        96,
        31,
        131,
        1,
        18,
        97,
        5,
        121,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        96,
        32,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        21,
        97,
        5,
        149,
        87,
        97,
        5,
        149,
        97,
        4,
        210,
        86,
        91,
        129,
        96,
        5,
        27,
        97,
        5,
        164,
        130,
        130,
        1,
        97,
        4,
        232,
        86,
        91,
        146,
        131,
        82,
        132,
        129,
        1,
        130,
        1,
        146,
        130,
        129,
        1,
        144,
        135,
        133,
        17,
        21,
        97,
        5,
        190,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        135,
        1,
        146,
        80,
        91,
        132,
        131,
        16,
        21,
        97,
        5,
        221,
        87,
        130,
        53,
        130,
        82,
        145,
        131,
        1,
        145,
        144,
        131,
        1,
        144,
        97,
        5,
        196,
        86,
        91,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        128,
        132,
        134,
        3,
        18,
        21,
        97,
        5,
        253,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        6,
        21,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        134,
        1,
        145,
        80,
        134,
        96,
        31,
        131,
        1,
        18,
        97,
        6,
        41,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        96,
        32,
        130,
        130,
        17,
        21,
        97,
        6,
        61,
        87,
        97,
        6,
        61,
        97,
        4,
        210,
        86,
        91,
        97,
        6,
        79,
        96,
        31,
        131,
        1,
        96,
        31,
        25,
        22,
        130,
        1,
        97,
        4,
        232,
        86,
        91,
        130,
        129,
        82,
        137,
        130,
        132,
        135,
        1,
        1,
        17,
        21,
        97,
        6,
        99,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        130,
        134,
        1,
        131,
        131,
        1,
        55,
        96,
        0,
        129,
        132,
        1,
        131,
        1,
        82,
        150,
        80,
        97,
        6,
        129,
        137,
        137,
        131,
        1,
        97,
        5,
        25,
        86,
        91,
        149,
        80,
        80,
        80,
        96,
        96,
        134,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        6,
        153,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        6,
        166,
        134,
        130,
        135,
        1,
        97,
        5,
        104,
        86,
        91,
        145,
        80,
        80,
        146,
        80,
        146,
        80,
        146,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        6,
        194,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        6,
        218,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        96,
        5,
        27,
        133,
        1,
        1,
        17,
        21,
        97,
        6,
        245,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        64,
        133,
        135,
        3,
        18,
        21,
        97,
        7,
        18,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        7,
        42,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        7,
        54,
        136,
        131,
        137,
        1,
        97,
        6,
        176,
        86,
        91,
        144,
        150,
        80,
        148,
        80,
        96,
        32,
        135,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        7,
        79,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        7,
        92,
        135,
        130,
        136,
        1,
        97,
        6,
        176,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        130,
        132,
        3,
        96,
        160,
        129,
        18,
        21,
        97,
        7,
        124,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        128,
        129,
        18,
        21,
        97,
        7,
        138,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        96,
        128,
        129,
        1,
        129,
        129,
        16,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        23,
        21,
        97,
        7,
        174,
        87,
        97,
        7,
        174,
        97,
        4,
        210,
        86,
        91,
        96,
        64,
        144,
        129,
        82,
        132,
        53,
        130,
        82,
        96,
        32,
        128,
        134,
        1,
        53,
        144,
        131,
        1,
        82,
        132,
        129,
        1,
        53,
        144,
        130,
        1,
        82,
        96,
        96,
        128,
        133,
        1,
        53,
        144,
        130,
        1,
        82,
        148,
        96,
        128,
        144,
        147,
        1,
        53,
        147,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        97,
        8,
        30,
        87,
        97,
        8,
        30,
        97,
        7,
        246,
        86,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        91,
        96,
        0,
        128,
        131,
        53,
        96,
        30,
        25,
        132,
        54,
        3,
        1,
        129,
        18,
        97,
        8,
        60,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        1,
        128,
        53,
        145,
        80,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        21,
        97,
        8,
        87,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        1,
        145,
        80,
        54,
        129,
        144,
        3,
        130,
        19,
        21,
        97,
        6,
        245,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        130,
        1,
        128,
        130,
        17,
        21,
        97,
        8,
        127,
        87,
        97,
        8,
        127,
        97,
        7,
        246,
        86,
        91,
        146,
        145,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        55,
        79,
        60,
        152,
        184,
        148,
        102,
        49,
        101,
        147,
        215,
        137,
        89,
        48,
        199,
        171,
        1,
        103,
        32,
        137,
        243,
        142,
        73,
        218,
        65,
        222,
        158,
        142,
        233,
        248,
        228,
        196,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        18,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static HOTSHOT_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        125,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        103,
        105,
        35,
        80,
        17,
        97,
        0,
        91,
        87,
        128,
        99,
        103,
        105,
        35,
        80,
        20,
        97,
        0,
        211,
        87,
        128,
        99,
        103,
        162,
        30,
        112,
        20,
        97,
        0,
        230,
        87,
        128,
        99,
        241,
        244,
        93,
        153,
        20,
        97,
        1,
        48,
        87,
        128,
        99,
        244,
        79,
        247,
        18,
        20,
        97,
        2,
        11,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        38,
        131,
        61,
        204,
        20,
        97,
        0,
        130,
        87,
        128,
        99,
        73,
        206,
        137,
        151,
        20,
        97,
        0,
        158,
        87,
        128,
        99,
        80,
        171,
        143,
        142,
        20,
        97,
        0,
        190,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        139,
        97,
        3,
        232,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        139,
        97,
        0,
        172,
        54,
        96,
        4,
        97,
        4,
        185,
        86,
        91,
        96,
        0,
        96,
        32,
        129,
        144,
        82,
        144,
        129,
        82,
        96,
        64,
        144,
        32,
        84,
        129,
        86,
        91,
        97,
        0,
        209,
        97,
        0,
        204,
        54,
        96,
        4,
        97,
        5,
        232,
        86,
        91,
        97,
        2,
        20,
        86,
        91,
        0,
        91,
        97,
        0,
        209,
        97,
        0,
        225,
        54,
        96,
        4,
        97,
        6,
        252,
        86,
        91,
        97,
        2,
        189,
        86,
        91,
        97,
        0,
        249,
        97,
        0,
        244,
        54,
        96,
        4,
        97,
        4,
        185,
        86,
        91,
        97,
        4,
        37,
        86,
        91,
        96,
        64,
        128,
        81,
        131,
        81,
        129,
        82,
        96,
        32,
        128,
        133,
        1,
        81,
        144,
        130,
        1,
        82,
        131,
        130,
        1,
        81,
        145,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        96,
        146,
        131,
        1,
        81,
        146,
        129,
        1,
        146,
        144,
        146,
        82,
        96,
        128,
        130,
        1,
        82,
        96,
        160,
        1,
        97,
        0,
        149,
        86,
        91,
        97,
        0,
        209,
        97,
        1,
        62,
        54,
        96,
        4,
        97,
        7,
        104,
        86,
        91,
        96,
        3,
        128,
        84,
        96,
        0,
        144,
        129,
        82,
        96,
        2,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        148,
        144,
        148,
        85,
        130,
        84,
        96,
        1,
        129,
        1,
        132,
        85,
        146,
        144,
        145,
        82,
        131,
        81,
        127,
        194,
        87,
        90,
        14,
        158,
        89,
        60,
        0,
        249,
        89,
        248,
        201,
        47,
        18,
        219,
        40,
        105,
        195,
        57,
        90,
        59,
        5,
        2,
        208,
        94,
        37,
        22,
        68,
        111,
        113,
        248,
        91,
        96,
        4,
        144,
        147,
        2,
        146,
        131,
        1,
        85,
        131,
        1,
        81,
        127,
        194,
        87,
        90,
        14,
        158,
        89,
        60,
        0,
        249,
        89,
        248,
        201,
        47,
        18,
        219,
        40,
        105,
        195,
        57,
        90,
        59,
        5,
        2,
        208,
        94,
        37,
        22,
        68,
        111,
        113,
        248,
        92,
        130,
        1,
        85,
        144,
        130,
        1,
        81,
        127,
        194,
        87,
        90,
        14,
        158,
        89,
        60,
        0,
        249,
        89,
        248,
        201,
        47,
        18,
        219,
        40,
        105,
        195,
        57,
        90,
        59,
        5,
        2,
        208,
        94,
        37,
        22,
        68,
        111,
        113,
        248,
        93,
        130,
        1,
        85,
        96,
        96,
        144,
        145,
        1,
        81,
        127,
        194,
        87,
        90,
        14,
        158,
        89,
        60,
        0,
        249,
        89,
        248,
        201,
        47,
        18,
        219,
        40,
        105,
        195,
        57,
        90,
        59,
        5,
        2,
        208,
        94,
        37,
        22,
        68,
        111,
        113,
        248,
        94,
        144,
        145,
        1,
        85,
        86,
        91,
        97,
        0,
        139,
        96,
        1,
        84,
        129,
        86,
        91,
        96,
        0,
        91,
        129,
        129,
        129,
        81,
        129,
        16,
        97,
        2,
        41,
        87,
        97,
        2,
        41,
        97,
        7,
        224,
        86,
        91,
        96,
        32,
        2,
        96,
        32,
        1,
        1,
        81,
        96,
        0,
        20,
        128,
        21,
        97,
        2,
        64,
        87,
        80,
        129,
        81,
        129,
        16,
        91,
        21,
        97,
        2,
        87,
        87,
        128,
        97,
        2,
        79,
        129,
        97,
        8,
        12,
        86,
        91,
        145,
        80,
        80,
        97,
        2,
        23,
        86,
        91,
        129,
        81,
        129,
        16,
        97,
        2,
        183,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        34,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        116,
        32,
        108,
        101,
        97,
        115,
        116,
        32,
        111,
        110,
        101,
        32,
        107,
        101,
        121,
        32,
        109,
        117,
        115,
        116,
        32,
        98,
        101,
        32,
        115,
        101,
        108,
        101,
        99,
        116,
        101,
        96,
        68,
        130,
        1,
        82,
        97,
        50,
        23,
        96,
        241,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        80,
        80,
        80,
        86,
        91,
        130,
        129,
        20,
        97,
        2,
        231,
        87,
        96,
        64,
        81,
        99,
        99,
        141,
        245,
        209,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        132,
        144,
        82,
        96,
        36,
        129,
        1,
        130,
        144,
        82,
        96,
        68,
        1,
        97,
        2,
        174,
        86,
        91,
        97,
        3,
        232,
        131,
        17,
        21,
        97,
        3,
        13,
        87,
        96,
        64,
        81,
        99,
        224,
        130,
        132,
        11,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        132,
        144,
        82,
        96,
        36,
        1,
        97,
        2,
        174,
        86,
        91,
        96,
        1,
        84,
        96,
        0,
        91,
        132,
        129,
        16,
        21,
        97,
        3,
        228,
        87,
        97,
        3,
        104,
        96,
        1,
        84,
        135,
        135,
        132,
        129,
        129,
        16,
        97,
        3,
        51,
        87,
        97,
        3,
        51,
        97,
        7,
        224,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        53,
        134,
        134,
        133,
        129,
        129,
        16,
        97,
        3,
        76,
        87,
        97,
        3,
        76,
        97,
        7,
        224,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        129,
        1,
        144,
        97,
        3,
        94,
        145,
        144,
        97,
        8,
        37,
        86,
        91,
        96,
        1,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        3,
        139,
        87,
        96,
        1,
        84,
        96,
        64,
        81,
        99,
        120,
        24,
        103,
        25,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        2,
        174,
        145,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        133,
        133,
        130,
        129,
        129,
        16,
        97,
        3,
        157,
        87,
        97,
        3,
        157,
        97,
        7,
        224,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        53,
        96,
        0,
        128,
        96,
        1,
        84,
        129,
        82,
        96,
        32,
        1,
        144,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        32,
        129,
        144,
        85,
        80,
        96,
        1,
        128,
        96,
        0,
        130,
        130,
        84,
        97,
        3,
        206,
        145,
        144,
        97,
        8,
        108,
        86,
        91,
        144,
        145,
        85,
        80,
        97,
        3,
        221,
        144,
        80,
        129,
        97,
        8,
        12,
        86,
        91,
        144,
        80,
        97,
        3,
        19,
        86,
        91,
        80,
        96,
        64,
        128,
        81,
        130,
        129,
        82,
        96,
        32,
        129,
        1,
        134,
        144,
        82,
        127,
        130,
        3,
        162,
        30,
        79,
        149,
        247,
        46,
        80,
        129,
        213,
        224,
        146,
        155,
        26,
        140,
        82,
        20,
        30,
        18,
        63,
        154,
        20,
        225,
        231,
        75,
        2,
        96,
        250,
        95,
        82,
        241,
        145,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        4,
        80,
        96,
        64,
        81,
        128,
        96,
        128,
        1,
        96,
        64,
        82,
        128,
        96,
        0,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        129,
        82,
        80,
        144,
        86,
        91,
        96,
        0,
        96,
        3,
        131,
        129,
        84,
        129,
        16,
        97,
        4,
        101,
        87,
        97,
        4,
        101,
        97,
        7,
        224,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        128,
        131,
        32,
        149,
        131,
        82,
        96,
        2,
        128,
        130,
        82,
        96,
        64,
        147,
        132,
        144,
        32,
        84,
        132,
        81,
        96,
        128,
        129,
        1,
        134,
        82,
        96,
        4,
        144,
        148,
        2,
        144,
        151,
        1,
        128,
        84,
        132,
        82,
        96,
        1,
        129,
        1,
        84,
        146,
        132,
        1,
        146,
        144,
        146,
        82,
        129,
        1,
        84,
        146,
        130,
        1,
        146,
        144,
        146,
        82,
        96,
        3,
        144,
        145,
        1,
        84,
        96,
        96,
        130,
        1,
        82,
        147,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        4,
        203,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        81,
        96,
        31,
        130,
        1,
        96,
        31,
        25,
        22,
        129,
        1,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        130,
        130,
        16,
        23,
        21,
        97,
        5,
        17,
        87,
        97,
        5,
        17,
        97,
        4,
        210,
        86,
        91,
        96,
        64,
        82,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        64,
        130,
        132,
        3,
        18,
        21,
        97,
        5,
        43,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        64,
        81,
        96,
        64,
        129,
        1,
        129,
        129,
        16,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        23,
        21,
        97,
        5,
        78,
        87,
        97,
        5,
        78,
        97,
        4,
        210,
        86,
        91,
        96,
        64,
        82,
        130,
        53,
        129,
        82,
        96,
        32,
        146,
        131,
        1,
        53,
        146,
        129,
        1,
        146,
        144,
        146,
        82,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        130,
        96,
        31,
        131,
        1,
        18,
        97,
        5,
        121,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        96,
        32,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        21,
        97,
        5,
        149,
        87,
        97,
        5,
        149,
        97,
        4,
        210,
        86,
        91,
        129,
        96,
        5,
        27,
        97,
        5,
        164,
        130,
        130,
        1,
        97,
        4,
        232,
        86,
        91,
        146,
        131,
        82,
        132,
        129,
        1,
        130,
        1,
        146,
        130,
        129,
        1,
        144,
        135,
        133,
        17,
        21,
        97,
        5,
        190,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        135,
        1,
        146,
        80,
        91,
        132,
        131,
        16,
        21,
        97,
        5,
        221,
        87,
        130,
        53,
        130,
        82,
        145,
        131,
        1,
        145,
        144,
        131,
        1,
        144,
        97,
        5,
        196,
        86,
        91,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        128,
        132,
        134,
        3,
        18,
        21,
        97,
        5,
        253,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        6,
        21,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        134,
        1,
        145,
        80,
        134,
        96,
        31,
        131,
        1,
        18,
        97,
        6,
        41,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        96,
        32,
        130,
        130,
        17,
        21,
        97,
        6,
        61,
        87,
        97,
        6,
        61,
        97,
        4,
        210,
        86,
        91,
        97,
        6,
        79,
        96,
        31,
        131,
        1,
        96,
        31,
        25,
        22,
        130,
        1,
        97,
        4,
        232,
        86,
        91,
        130,
        129,
        82,
        137,
        130,
        132,
        135,
        1,
        1,
        17,
        21,
        97,
        6,
        99,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        130,
        134,
        1,
        131,
        131,
        1,
        55,
        96,
        0,
        129,
        132,
        1,
        131,
        1,
        82,
        150,
        80,
        97,
        6,
        129,
        137,
        137,
        131,
        1,
        97,
        5,
        25,
        86,
        91,
        149,
        80,
        80,
        80,
        96,
        96,
        134,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        6,
        153,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        6,
        166,
        134,
        130,
        135,
        1,
        97,
        5,
        104,
        86,
        91,
        145,
        80,
        80,
        146,
        80,
        146,
        80,
        146,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        6,
        194,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        6,
        218,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        96,
        5,
        27,
        133,
        1,
        1,
        17,
        21,
        97,
        6,
        245,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        64,
        133,
        135,
        3,
        18,
        21,
        97,
        7,
        18,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        7,
        42,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        7,
        54,
        136,
        131,
        137,
        1,
        97,
        6,
        176,
        86,
        91,
        144,
        150,
        80,
        148,
        80,
        96,
        32,
        135,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        7,
        79,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        7,
        92,
        135,
        130,
        136,
        1,
        97,
        6,
        176,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        130,
        132,
        3,
        96,
        160,
        129,
        18,
        21,
        97,
        7,
        124,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        128,
        129,
        18,
        21,
        97,
        7,
        138,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        96,
        128,
        129,
        1,
        129,
        129,
        16,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        23,
        21,
        97,
        7,
        174,
        87,
        97,
        7,
        174,
        97,
        4,
        210,
        86,
        91,
        96,
        64,
        144,
        129,
        82,
        132,
        53,
        130,
        82,
        96,
        32,
        128,
        134,
        1,
        53,
        144,
        131,
        1,
        82,
        132,
        129,
        1,
        53,
        144,
        130,
        1,
        82,
        96,
        96,
        128,
        133,
        1,
        53,
        144,
        130,
        1,
        82,
        148,
        96,
        128,
        144,
        147,
        1,
        53,
        147,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        97,
        8,
        30,
        87,
        97,
        8,
        30,
        97,
        7,
        246,
        86,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        91,
        96,
        0,
        128,
        131,
        53,
        96,
        30,
        25,
        132,
        54,
        3,
        1,
        129,
        18,
        97,
        8,
        60,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        1,
        128,
        53,
        145,
        80,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        21,
        97,
        8,
        87,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        1,
        145,
        80,
        54,
        129,
        144,
        3,
        130,
        19,
        21,
        97,
        6,
        245,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        130,
        1,
        128,
        130,
        17,
        21,
        97,
        8,
        127,
        87,
        97,
        8,
        127,
        97,
        7,
        246,
        86,
        91,
        146,
        145,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        55,
        79,
        60,
        152,
        184,
        148,
        102,
        49,
        101,
        147,
        215,
        137,
        89,
        48,
        199,
        171,
        1,
        103,
        32,
        137,
        243,
        142,
        73,
        218,
        65,
        222,
        158,
        142,
        233,
        248,
        228,
        196,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        18,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static HOTSHOT_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct HotShot<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for HotShot<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for HotShot<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for HotShot<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for HotShot<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(HotShot))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> HotShot<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                HOTSHOT_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                HOTSHOT_ABI.clone(),
                HOTSHOT_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `MAX_BLOCKS` (0x26833dcc) function
        pub fn max_blocks(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([38, 131, 61, 204], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `addNewStakingKey` (0xf1f45d99) function
        pub fn add_new_staking_key(
            &self,
            staking_key: G2Point,
            amount: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([241, 244, 93, 153], (staking_key, amount))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `blockHeight` (0xf44ff712) function
        pub fn block_height(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([244, 79, 247, 18], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `commitments` (0x49ce8997) function
        pub fn commitments(
            &self,
            p0: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([73, 206, 137, 151], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `getStakingKey` (0x67a21e70) function
        pub fn get_staking_key(
            &self,
            index: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, (G2Point, ::ethers::core::types::U256)>
        {
            self.0
                .method_hash([103, 162, 30, 112], index)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `newBlocks` (0x67692350) function
        pub fn new_blocks(
            &self,
            new_commitments: ::std::vec::Vec<::ethers::core::types::U256>,
            qcs: ::std::vec::Vec<::ethers::core::types::Bytes>,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([103, 105, 35, 80], (new_commitments, qcs))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `verify_agg_sig` (0x50ab8f8e) function
        pub fn verify_agg_sig(
            &self,
            message: ::ethers::core::types::Bytes,
            sig: G1Point,
            bitmap: ::std::vec::Vec<::ethers::core::types::U256>,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([80, 171, 143, 142], (message, sig, bitmap))
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `NewBlocks` event
        pub fn new_blocks_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, NewBlocksFilter> {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, NewBlocksFilter> {
            self.0
                .event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>> for HotShot<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `InvalidQC` with signature `InvalidQC(uint256)` and selector `0x78186719`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[etherror(name = "InvalidQC", abi = "InvalidQC(uint256)")]
    pub struct InvalidQC {
        pub block_number: ::ethers::core::types::U256,
    }
    ///Custom Error type `TooManyBlocks` with signature `TooManyBlocks(uint256)` and selector `0xe082840b`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[etherror(name = "TooManyBlocks", abi = "TooManyBlocks(uint256)")]
    pub struct TooManyBlocks {
        pub num_blocks: ::ethers::core::types::U256,
    }
    ///Custom Error type `WrongNumberOfQCs` with signature `WrongNumberOfQCs(uint256,uint256)` and selector `0xc71beba2`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[etherror(name = "WrongNumberOfQCs", abi = "WrongNumberOfQCs(uint256,uint256)")]
    pub struct WrongNumberOfQCs {
        pub num_blocks: ::ethers::core::types::U256,
        pub num_q_cs: ::ethers::core::types::U256,
    }
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum HotShotErrors {
        InvalidQC(InvalidQC),
        TooManyBlocks(TooManyBlocks),
        WrongNumberOfQCs(WrongNumberOfQCs),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for HotShotErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) =
                <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded) = <InvalidQC as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::InvalidQC(decoded));
            }
            if let Ok(decoded) = <TooManyBlocks as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::TooManyBlocks(decoded));
            }
            if let Ok(decoded) = <WrongNumberOfQCs as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::WrongNumberOfQCs(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for HotShotErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::InvalidQC(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::TooManyBlocks(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::WrongNumberOfQCs(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for HotShotErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector == <InvalidQC as ::ethers::contract::EthError>::selector() => true,
                _ if selector == <TooManyBlocks as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector == <WrongNumberOfQCs as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for HotShotErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::InvalidQC(element) => ::core::fmt::Display::fmt(element, f),
                Self::TooManyBlocks(element) => ::core::fmt::Display::fmt(element, f),
                Self::WrongNumberOfQCs(element) => ::core::fmt::Display::fmt(element, f),
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for HotShotErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<InvalidQC> for HotShotErrors {
        fn from(value: InvalidQC) -> Self {
            Self::InvalidQC(value)
        }
    }
    impl ::core::convert::From<TooManyBlocks> for HotShotErrors {
        fn from(value: TooManyBlocks) -> Self {
            Self::TooManyBlocks(value)
        }
    }
    impl ::core::convert::From<WrongNumberOfQCs> for HotShotErrors {
        fn from(value: WrongNumberOfQCs) -> Self {
            Self::WrongNumberOfQCs(value)
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethevent(name = "NewBlocks", abi = "NewBlocks(uint256,uint256)")]
    pub struct NewBlocksFilter {
        pub first_block_number: ::ethers::core::types::U256,
        pub num_blocks: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `MAX_BLOCKS` function with signature `MAX_BLOCKS()` and selector `0x26833dcc`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "MAX_BLOCKS", abi = "MAX_BLOCKS()")]
    pub struct MaxBlocksCall;
    ///Container type for all input parameters for the `addNewStakingKey` function with signature `addNewStakingKey((uint256,uint256,uint256,uint256),uint256)` and selector `0xf1f45d99`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "addNewStakingKey",
        abi = "addNewStakingKey((uint256,uint256,uint256,uint256),uint256)"
    )]
    pub struct AddNewStakingKeyCall {
        pub staking_key: G2Point,
        pub amount: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `blockHeight` function with signature `blockHeight()` and selector `0xf44ff712`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "blockHeight", abi = "blockHeight()")]
    pub struct BlockHeightCall;
    ///Container type for all input parameters for the `commitments` function with signature `commitments(uint256)` and selector `0x49ce8997`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "commitments", abi = "commitments(uint256)")]
    pub struct CommitmentsCall(pub ::ethers::core::types::U256);
    ///Container type for all input parameters for the `getStakingKey` function with signature `getStakingKey(uint256)` and selector `0x67a21e70`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "getStakingKey", abi = "getStakingKey(uint256)")]
    pub struct GetStakingKeyCall {
        pub index: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `newBlocks` function with signature `newBlocks(uint256[],bytes[])` and selector `0x67692350`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "newBlocks", abi = "newBlocks(uint256[],bytes[])")]
    pub struct NewBlocksCall {
        pub new_commitments: ::std::vec::Vec<::ethers::core::types::U256>,
        pub qcs: ::std::vec::Vec<::ethers::core::types::Bytes>,
    }
    ///Container type for all input parameters for the `verify_agg_sig` function with signature `verify_agg_sig(bytes,(uint256,uint256),uint256[])` and selector `0x50ab8f8e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(
        name = "verify_agg_sig",
        abi = "verify_agg_sig(bytes,(uint256,uint256),uint256[])"
    )]
    pub struct VerifyAggSigCall {
        pub message: ::ethers::core::types::Bytes,
        pub sig: G1Point,
        pub bitmap: ::std::vec::Vec<::ethers::core::types::U256>,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum HotShotCalls {
        MaxBlocks(MaxBlocksCall),
        AddNewStakingKey(AddNewStakingKeyCall),
        BlockHeight(BlockHeightCall),
        Commitments(CommitmentsCall),
        GetStakingKey(GetStakingKeyCall),
        NewBlocks(NewBlocksCall),
        VerifyAggSig(VerifyAggSigCall),
    }
    impl ::ethers::core::abi::AbiDecode for HotShotCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <MaxBlocksCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::MaxBlocks(decoded));
            }
            if let Ok(decoded) =
                <AddNewStakingKeyCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::AddNewStakingKey(decoded));
            }
            if let Ok(decoded) = <BlockHeightCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::BlockHeight(decoded));
            }
            if let Ok(decoded) = <CommitmentsCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Commitments(decoded));
            }
            if let Ok(decoded) = <GetStakingKeyCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::GetStakingKey(decoded));
            }
            if let Ok(decoded) = <NewBlocksCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::NewBlocks(decoded));
            }
            if let Ok(decoded) = <VerifyAggSigCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::VerifyAggSig(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for HotShotCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::MaxBlocks(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::AddNewStakingKey(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::BlockHeight(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Commitments(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::GetStakingKey(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::NewBlocks(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::VerifyAggSig(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for HotShotCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::MaxBlocks(element) => ::core::fmt::Display::fmt(element, f),
                Self::AddNewStakingKey(element) => ::core::fmt::Display::fmt(element, f),
                Self::BlockHeight(element) => ::core::fmt::Display::fmt(element, f),
                Self::Commitments(element) => ::core::fmt::Display::fmt(element, f),
                Self::GetStakingKey(element) => ::core::fmt::Display::fmt(element, f),
                Self::NewBlocks(element) => ::core::fmt::Display::fmt(element, f),
                Self::VerifyAggSig(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<MaxBlocksCall> for HotShotCalls {
        fn from(value: MaxBlocksCall) -> Self {
            Self::MaxBlocks(value)
        }
    }
    impl ::core::convert::From<AddNewStakingKeyCall> for HotShotCalls {
        fn from(value: AddNewStakingKeyCall) -> Self {
            Self::AddNewStakingKey(value)
        }
    }
    impl ::core::convert::From<BlockHeightCall> for HotShotCalls {
        fn from(value: BlockHeightCall) -> Self {
            Self::BlockHeight(value)
        }
    }
    impl ::core::convert::From<CommitmentsCall> for HotShotCalls {
        fn from(value: CommitmentsCall) -> Self {
            Self::Commitments(value)
        }
    }
    impl ::core::convert::From<GetStakingKeyCall> for HotShotCalls {
        fn from(value: GetStakingKeyCall) -> Self {
            Self::GetStakingKey(value)
        }
    }
    impl ::core::convert::From<NewBlocksCall> for HotShotCalls {
        fn from(value: NewBlocksCall) -> Self {
            Self::NewBlocks(value)
        }
    }
    impl ::core::convert::From<VerifyAggSigCall> for HotShotCalls {
        fn from(value: VerifyAggSigCall) -> Self {
            Self::VerifyAggSig(value)
        }
    }
    ///Container type for all return fields from the `MAX_BLOCKS` function with signature `MAX_BLOCKS()` and selector `0x26833dcc`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct MaxBlocksReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `blockHeight` function with signature `blockHeight()` and selector `0xf44ff712`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct BlockHeightReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `commitments` function with signature `commitments(uint256)` and selector `0x49ce8997`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct CommitmentsReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `getStakingKey` function with signature `getStakingKey(uint256)` and selector `0x67a21e70`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GetStakingKeyReturn(pub G2Point, pub ::ethers::core::types::U256);
}
