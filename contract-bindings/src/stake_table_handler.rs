pub use stake_table_handler::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod stake_table_handler {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::Some(::ethers::core::abi::ethabi::Constructor {
                inputs: ::std::vec![
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("_stakeTable"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("contract StakeTable"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("_tokenCreator"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("address"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("_token"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("contract ExampleToken"),
                        ),
                    },
                    ::ethers::core::abi::ethabi::Param {
                        name: ::std::borrow::ToOwned::to_owned("_lightClient"),
                        kind: ::ethers::core::abi::ethabi::ParamType::Address,
                        internal_type: ::core::option::Option::Some(
                            ::std::borrow::ToOwned::to_owned("contract LightClientTest"),
                        ),
                    },
                ],
            }),
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("advanceEpoch"),
                    ::std::vec![::ethers::core::abi::ethabi::Function {
                        name: ::std::borrow::ToOwned::to_owned("advanceEpoch"),
                        inputs: ::std::vec![],
                        outputs: ::std::vec![],
                        constant: ::core::option::Option::None,
                        state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                    },],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("register"),
                    ::std::vec![::ethers::core::abi::ethabi::Function {
                        name: ::std::borrow::ToOwned::to_owned("register"),
                        inputs: ::std::vec![
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("seed"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Uint(8usize),
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("uint8"),
                                ),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("amount"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Uint(64usize),
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("uint64"),
                                ),
                            },
                        ],
                        outputs: ::std::vec![],
                        constant: ::core::option::Option::None,
                        state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                    },],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("requestExit"),
                    ::std::vec![::ethers::core::abi::ethabi::Function {
                        name: ::std::borrow::ToOwned::to_owned("requestExit"),
                        inputs: ::std::vec![::ethers::core::abi::ethabi::Param {
                            name: ::std::borrow::ToOwned::to_owned("rand"),
                            kind: ::ethers::core::abi::ethabi::ParamType::Uint(256usize,),
                            internal_type: ::core::option::Option::Some(
                                ::std::borrow::ToOwned::to_owned("uint256"),
                            ),
                        },],
                        outputs: ::std::vec![],
                        constant: ::core::option::Option::None,
                        state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                    },],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("stakeTable"),
                    ::std::vec![::ethers::core::abi::ethabi::Function {
                        name: ::std::borrow::ToOwned::to_owned("stakeTable"),
                        inputs: ::std::vec![],
                        outputs: ::std::vec![::ethers::core::abi::ethabi::Param {
                            name: ::std::string::String::new(),
                            kind: ::ethers::core::abi::ethabi::ParamType::Address,
                            internal_type: ::core::option::Option::Some(
                                ::std::borrow::ToOwned::to_owned("contract StakeTable"),
                            ),
                        },],
                        constant: ::core::option::Option::None,
                        state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                    },],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("token"),
                    ::std::vec![::ethers::core::abi::ethabi::Function {
                        name: ::std::borrow::ToOwned::to_owned("token"),
                        inputs: ::std::vec![],
                        outputs: ::std::vec![::ethers::core::abi::ethabi::Param {
                            name: ::std::string::String::new(),
                            kind: ::ethers::core::abi::ethabi::ParamType::Address,
                            internal_type: ::core::option::Option::Some(
                                ::std::borrow::ToOwned::to_owned("contract ExampleToken"),
                            ),
                        },],
                        constant: ::core::option::Option::None,
                        state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                    },],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("withdrawFunds"),
                    ::std::vec![::ethers::core::abi::ethabi::Function {
                        name: ::std::borrow::ToOwned::to_owned("withdrawFunds"),
                        inputs: ::std::vec![::ethers::core::abi::ethabi::Param {
                            name: ::std::borrow::ToOwned::to_owned("rand"),
                            kind: ::ethers::core::abi::ethabi::ParamType::Uint(256usize,),
                            internal_type: ::core::option::Option::Some(
                                ::std::borrow::ToOwned::to_owned("uint256"),
                            ),
                        },],
                        outputs: ::std::vec![],
                        constant: ::core::option::Option::None,
                        state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                    },],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static STAKETABLEHANDLER_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(__abi);
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@R4\x80\x15b\0\0\x11W`\0\x80\xFD[P`@Qb\0\x15A8\x03\x80b\0\x15A\x839\x81\x01`@\x81\x90Rb\0\x004\x91b\0\0\xA0V[`\x0F\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x96\x87\x16\x17\x90\x91U`\x11\x80T\x82\x16\x93\x86\x16\x93\x90\x93\x17\x90\x92U`\x10\x80T\x83\x16\x93\x85\x16\x93\x90\x93\x17\x90\x92U`\x14\x80T\x90\x91\x16\x91\x90\x92\x16\x17\x90Ub\0\x01\x08V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14b\0\0\x9DW`\0\x80\xFD[PV[`\0\x80`\0\x80`\x80\x85\x87\x03\x12\x15b\0\0\xB7W`\0\x80\xFD[\x84Qb\0\0\xC4\x81b\0\0\x87V[` \x86\x01Q\x90\x94Pb\0\0\xD7\x81b\0\0\x87V[`@\x86\x01Q\x90\x93Pb\0\0\xEA\x81b\0\0\x87V[``\x86\x01Q\x90\x92Pb\0\0\xFD\x81b\0\0\x87V[\x93\x96\x92\x95P\x90\x93PPV[a\x14)\x80b\0\x01\x18`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0bW`\x005`\xE0\x1C\x80c\x15]\xD5\xEE\x14a\0gW\x80c<\xF8\x0El\x14a\0|W\x80c\\\x05\x03G\x14a\0\x84W\x80cr\x1Ce\x13\x14a\0\xB3W\x80c\x7F\xAE\xB4\xEF\x14a\0\xC6W\x80c\xFC\x0CTj\x14a\0\xD9W[`\0\x80\xFD[a\0za\0u6`\x04a\x0FXV[a\0\xECV[\0[a\0za\x02PV[`\x0FTa\0\x97\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[a\0za\0\xC16`\x04a\x0FXV[a\x039V[a\0za\0\xD46`\x04a\x0F\x8AV[a\x05\xD0V[`\x11Ta\0\x97\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\0a\x01\x0B\x82`\0`\x01`\x12\x80T\x90Pa\x01\x06\x91\x90a\x0F\xDFV[a\x05\xF5V[\x90P`\0`\x12\x82\x81T\x81\x10a\x01\"Wa\x01\"a\x0F\xF8V[`\0\x91\x82R` \x91\x82\x90 `@\x80Q`\x80\x81\x01\x82R`\x04\x93\x84\x02\x90\x92\x01\x80T\x83R`\x01\x81\x01T\x94\x83\x01\x94\x90\x94R`\x02\x84\x01T\x82\x82\x01R`\x03\x90\x93\x01T``\x82\x01R`\x10T\x92Qc\xCAf\x9F\xA7`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x93\x16\x91\x83\x01\x91\x90\x91R\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCAf\x9F\xA7\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x01\xBFW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x01\xD3W=`\0\x80>=`\0\xFD[PP`\x0FT`@Qc\x01\x84\x95\xE3`\xE3\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\x0C$\xAF\x18\x91Pa\x02\x07\x90\x84\x90`\x04\x01a\x10\x0EV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x02&W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02J\x91\x90a\x109V[PPPPV[`\x14T`@\x80Qc\x0E\xCC\xE3\x01`\xE3\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91cvg\x18\x08\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x02\x9AW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xBE\x91\x90a\x109V[\x90P`\0a\x02\xCD\x82`\x01a\x10VV[`\x14T`@Qc9I\xD1\xE9`\xE0\x1B\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16`\x04\x82\x01R\x91\x92P`\x01`\x01`\xA0\x1B\x03\x16\x90c9I\xD1\xE9\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x03\x1DW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x031W=`\0\x80>=`\0\xFD[PPPPPPV[`\0a\x03S\x82`\0`\x01`\x12\x80T\x90Pa\x01\x06\x91\x90a\x0F\xDFV[`\x10T`@Qc\xCAf\x9F\xA7`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\x04\x82\x01R\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCAf\x9F\xA7\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x03\xAFW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x03\xC3W=`\0\x80>=`\0\xFD[PP`\x0FT`\x12\x80T`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93PcJ\xA7\xC2\x7F\x92P\x90\x84\x90\x81\x10a\x03\xF1Wa\x03\xF1a\x0F\xF8V[\x90`\0R` `\0 \x90`\x04\x02\x01`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04?\x91\x90\x81T\x81R`\x01\x82\x01T` \x82\x01R`\x02\x82\x01T`@\x82\x01R`\x03\x90\x91\x01T``\x82\x01R`\x80\x01\x90V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x04^W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x82\x91\x90a\x10~V[P`\0`\x12\x82\x81T\x81\x10a\x04\x98Wa\x04\x98a\x0F\xF8V[\x90`\0R` `\0 \x90`\x04\x02\x01`@Q\x80`\x80\x01`@R\x90\x81`\0\x82\x01T\x81R` \x01`\x01\x82\x01T\x81R` \x01`\x02\x82\x01T\x81R` \x01`\x03\x82\x01T\x81RPP\x90P`\x12\x82\x81T\x81\x10a\x04\xEEWa\x04\xEEa\x0F\xF8V[`\0\x91\x82R` \x80\x83 `\x04\x92\x83\x02\x01\x83\x81U`\x01\x80\x82\x01\x85\x90U`\x02\x82\x01\x85\x90U`\x03\x90\x91\x01\x84\x90U`\x13\x80T\x91\x82\x01\x81U\x90\x93R\x83Q\x92\x90\x91\x02\x7Ff\xDE\x8F\xFD\xA7\x97\xE3\xDE\x9C\x05\xE8\xFCW\xB3\xBF\x0E\xC2\x8A\x93\r@\xB0\xD2\x85\xD9<\x06P\x1C\xF6\xA0\x90\x81\x01\x92\x90\x92U\x82\x01Q\x7Ff\xDE\x8F\xFD\xA7\x97\xE3\xDE\x9C\x05\xE8\xFCW\xB3\xBF\x0E\xC2\x8A\x93\r@\xB0\xD2\x85\xD9<\x06P\x1C\xF6\xA0\x91\x82\x01U`@\x82\x01Q\x7Ff\xDE\x8F\xFD\xA7\x97\xE3\xDE\x9C\x05\xE8\xFCW\xB3\xBF\x0E\xC2\x8A\x93\r@\xB0\xD2\x85\xD9<\x06P\x1C\xF6\xA0\x92\x82\x01U``\x90\x91\x01Q\x7Ff\xDE\x8F\xFD\xA7\x97\xE3\xDE\x9C\x05\xE8\xFCW\xB3\xBF\x0E\xC2\x8A\x93\r@\xB0\xD2\x85\xD9<\x06P\x1C\xF6\xA0\x93\x90\x91\x01UPPV[`\x10Ta\x05\xF1\x90`\x01`\x01`\xA0\x1B\x03\x16\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16a\x069V[PPV[`\0a\x06\x02\x84\x84\x84a\t\xF7V[\x90Pa\x062`@Q\x80`@\x01`@R\x80`\x0C\x81R` \x01k\x10\x9B\xDD[\x99\x08\x14\x99\\\xDD[\x1D`\xA2\x1B\x81RP\x82a\x0B\xBFV[\x93\x92PPPV[`\0\x80`\0a\x06H\x86\x86a\x0CYV[\x92P\x92P\x92P`\0a\x06]\x85`\0`da\x05\xF5V[`\x10T`@Qc\xCAf\x9F\xA7`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\x04\x82\x01R\x90\x91Pa\x03\xE8\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCAf\x9F\xA7\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x06\xBDW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x06\xD1W=`\0\x80>=`\0\xFD[PP`\x11T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x8C\x81\x16`\x04\x83\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16`$\x83\x01R\x90\x91\x16\x92Pc\xA9\x05\x9C\xBB\x91P`D\x01` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x071W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07U\x91\x90a\x10~V[P`@Qc\xCAf\x9F\xA7`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x89\x16`\x04\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCAf\x9F\xA7\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x07\xABW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x07\xBFW=`\0\x80>=`\0\xFD[PP`\x11T`\x0FT`@Qc\t^\xA7\xB3`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16`$\x82\x01R\x91\x16\x92Pc\t^\xA7\xB3\x91P`D\x01` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x08!W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08E\x91\x90a\x10~V[P`@Qc\xCAf\x9F\xA7`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x89\x16`\x04\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCAf\x9F\xA7\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x08\x9BW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x08\xAFW=`\0\x80>=`\0\xFD[PP`\x0FT`@Qc\xC7,\xC7\x17`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\xC7,\xC7\x17\x91Pa\x08\xEE\x90\x88\x90\x88\x90\x87\x90`\0\x90\x8A\x90\x89\x90`\x04\x01a\x10\xA0V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\t\rW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t1\x91\x90a\x10~V[PP`\x12\x80T`\x01\x81\x01\x82U`\0\x91\x90\x91R\x84Q\x7F\xBB\x8AjFi\xBA%\r&\xCDzE\x9E\xCA\x9D!_\x83\x07\xE3:\xEB\xE5\x03y\xBCZ6\x17\xEC4D`\x04\x90\x92\x02\x91\x82\x01U` \x85\x01Q\x7F\xBB\x8AjFi\xBA%\r&\xCDzE\x9E\xCA\x9D!_\x83\x07\xE3:\xEB\xE5\x03y\xBCZ6\x17\xEC4E\x82\x01U`@\x85\x01Q\x7F\xBB\x8AjFi\xBA%\r&\xCDzE\x9E\xCA\x9D!_\x83\x07\xE3:\xEB\xE5\x03y\xBCZ6\x17\xEC4F\x82\x01U``\x90\x94\x01Q\x7F\xBB\x8AjFi\xBA%\r&\xCDzE\x9E\xCA\x9D!_\x83\x07\xE3:\xEB\xE5\x03y\xBCZ6\x17\xEC4G\x90\x94\x01\x93\x90\x93UPPPPPPV[`\0\x81\x83\x11\x15a\nsW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`>`$\x82\x01R\x7FStdUtils bound(uint256,uint256,u`D\x82\x01R\x7Fint256): Max is less than min.\0\0`d\x82\x01R`\x84\x01`@Q\x80\x91\x03\x90\xFD[\x82\x84\x10\x15\x80\x15a\n\x83WP\x81\x84\x11\x15[\x15a\n\x8FWP\x82a\x062V[`\0a\n\x9B\x84\x84a\x0F\xDFV[a\n\xA6\x90`\x01a\x115V[\x90P`\x03\x85\x11\x15\x80\x15a\n\xB8WP\x84\x81\x11[\x15a\n\xCFWa\n\xC7\x85\x85a\x115V[\x91PPa\x062V[a\n\xDC`\x03`\0\x19a\x0F\xDFV[\x85\x10\x15\x80\x15a\n\xF5WPa\n\xF2\x85`\0\x19a\x0F\xDFV[\x81\x11[\x15a\x0B\x10Wa\x0B\x06\x85`\0\x19a\x0F\xDFV[a\n\xC7\x90\x84a\x0F\xDFV[\x82\x85\x11\x15a\x0BfW`\0a\x0B$\x84\x87a\x0F\xDFV[\x90P`\0a\x0B2\x83\x83a\x11HV[\x90P\x80`\0\x03a\x0BGW\x84\x93PPPPa\x062V[`\x01a\x0BS\x82\x88a\x115V[a\x0B]\x91\x90a\x0F\xDFV[\x93PPPa\x0B\xB7V[\x83\x85\x10\x15a\x0B\xB7W`\0a\x0Bz\x86\x86a\x0F\xDFV[\x90P`\0a\x0B\x88\x83\x83a\x11HV[\x90P\x80`\0\x03a\x0B\x9DW\x85\x93PPPPa\x062V[a\x0B\xA7\x81\x86a\x0F\xDFV[a\x0B\xB2\x90`\x01a\x115V[\x93PPP[P\x93\x92PPPV[`\0jconsole.log`\x01`\x01`\xA0\x1B\x03\x16\x83\x83`@Q`$\x01a\x0B\xE9\x92\x91\x90a\x11\xBAV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R` \x82\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c-\x83\x9C\xB3`\xE2\x1B\x17\x90RQa\x0C\x1E\x91\x90a\x11\xDCV[`\0`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80`\0\x81\x14a\x031W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x031V[a\x0C\x84`@Q\x80`\x80\x01`@R\x80`\0\x81R` \x01`\0\x81R` \x01`\0\x81R` \x01`\0\x81RP\x90V[`@\x80Q\x80\x82\x01\x82R`\0\x80\x82R` \x80\x83\x01\x82\x90R\x83Q\x80\x85\x01\x85R\x82\x81R\x80\x82\x01\x83\x90R\x84Q`\x04\x80\x82R`\xA0\x82\x01\x90\x96R\x93\x94\x90\x93\x91\x82\x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x0C\xC0W\x90PP\x90P`@Q\x80`@\x01`@R\x80`\t\x81R` \x01h\x19\x1AY\x99\x8B]\x19\\\xDD`\xBA\x1B\x81RP\x81`\0\x81Q\x81\x10a\r\x0CWa\r\x0Ca\x0F\xF8V[` \x02` \x01\x01\x81\x90RP`@Q\x80`@\x01`@R\x80`\x11\x81R` \x01p\x19\xD9[\x8BX\xDB\x1AY[\x9D\x0B]\xD8[\x1B\x19]`z\x1B\x81RP\x81`\x01\x81Q\x81\x10a\rTWa\rTa\x0F\xF8V[` \x90\x81\x02\x91\x90\x91\x01\x01R`@Qc+e1\x1F`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x87\x16`\x04\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90cV\xCAb>\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\r\xB7W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\r\xDF\x91\x90\x81\x01\x90a\x12\xCEV[\x81`\x02\x81Q\x81\x10a\r\xF2Wa\r\xF2a\x0F\xF8V[` \x90\x81\x02\x91\x90\x91\x01\x01R`@Qc4\x80Q\xD7`\xE1\x1B\x81R`\xFF\x86\x16`\x04\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0EOW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0Ew\x91\x90\x81\x01\x90a\x12\xCEV[\x81`\x03\x81Q\x81\x10a\x0E\x8AWa\x0E\x8Aa\x0F\xF8V[` \x90\x81\x02\x91\x90\x91\x01\x01R`@Qc\x89\x16\x04g`\xE0\x1B\x81R`\0\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x89\x16\x04g\x90a\x0E\xCF\x90\x85\x90`\x04\x01a\x13\x1FV[`\0`@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x0E\xEEW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0F\x16\x91\x90\x81\x01\x90a\x12\xCEV[\x90P`\0\x80`\0\x80\x84\x80` \x01\x90Q\x81\x01\x90a\x0F2\x91\x90a\x13\x83V[`@\x80Q\x80\x82\x01\x90\x91R\x91\x82R` \x82\x01R\x90\x9AP\x98P\x96PPPPPPP\x92P\x92P\x92V[`\0` \x82\x84\x03\x12\x15a\x0FjW`\0\x80\xFD[P5\x91\x90PV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x0F\x87W`\0\x80\xFD[PV[`\0\x80`@\x83\x85\x03\x12\x15a\x0F\x9DW`\0\x80\xFD[\x825`\xFF\x81\x16\x81\x14a\x0F\xAEW`\0\x80\xFD[\x91P` \x83\x015a\x0F\xBE\x81a\x0FqV[\x80\x91PP\x92P\x92\x90PV[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[\x81\x81\x03\x81\x81\x11\x15a\x0F\xF2Wa\x0F\xF2a\x0F\xC9V[\x92\x91PPV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[\x81Q\x81R` \x80\x83\x01Q\x90\x82\x01R`@\x80\x83\x01Q\x90\x82\x01R``\x80\x83\x01Q\x90\x82\x01R`\x80\x81\x01a\x0F\xF2V[`\0` \x82\x84\x03\x12\x15a\x10KW`\0\x80\xFD[\x81Qa\x062\x81a\x0FqV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a\x10wWa\x10wa\x0F\xC9V[P\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x10\x90W`\0\x80\xFD[\x81Q\x80\x15\x15\x81\x14a\x062W`\0\x80\xFD[\x86Q\x81R` \x80\x88\x01Q\x90\x82\x01R`@\x80\x88\x01Q\x90\x82\x01R``\x80\x88\x01Q\x90\x82\x01Ra\x01`\x81\x01\x86Q`\x80\x83\x01R` \x87\x01Q`\xA0\x83\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x87\x16`\xC0\x84\x01R`\x02\x86\x10a\x11\x07WcNH{q`\xE0\x1B`\0R`!`\x04R`$`\0\xFD[\x85`\xE0\x84\x01R\x84Qa\x01\0\x84\x01R` \x85\x01Qa\x01 \x84\x01R\x80\x84\x16a\x01@\x84\x01RP\x97\x96PPPPPPPV[\x80\x82\x01\x80\x82\x11\x15a\x0F\xF2Wa\x0F\xF2a\x0F\xC9V[`\0\x82a\x11eWcNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[P\x06\x90V[`\0[\x83\x81\x10\x15a\x11\x85W\x81\x81\x01Q\x83\x82\x01R` \x01a\x11mV[PP`\0\x91\x01RV[`\0\x81Q\x80\x84Ra\x11\xA6\x81` \x86\x01` \x86\x01a\x11jV[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[`@\x81R`\0a\x11\xCD`@\x83\x01\x85a\x11\x8EV[\x90P\x82` \x83\x01R\x93\x92PPPV[`\0\x82Qa\x11\xEE\x81\x84` \x87\x01a\x11jV[\x91\x90\x91\x01\x92\x91PPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x121Wa\x121a\x11\xF8V[`@R\x90V[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x121Wa\x121a\x11\xF8V[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x84\x11\x15a\x12uWa\x12ua\x11\xF8V[`@Q`\x1F\x85\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x82\x82\x11\x81\x83\x10\x17\x15a\x12\x9DWa\x12\x9Da\x11\xF8V[\x81`@R\x80\x93P\x85\x81R\x86\x86\x86\x01\x11\x15a\x12\xB6W`\0\x80\xFD[a\x12\xC4\x86` \x83\x01\x87a\x11jV[PPP\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\x12\xE0W`\0\x80\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12\xF7W`\0\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x13\x08W`\0\x80\xFD[a\x13\x17\x84\x82Q` \x84\x01a\x12ZV[\x94\x93PPPPV[`\0` \x80\x83\x01` \x84R\x80\x85Q\x80\x83R`@\x86\x01\x91P`@\x81`\x05\x1B\x87\x01\x01\x92P` \x87\x01`\0[\x82\x81\x10\x15a\x13vW`?\x19\x88\x86\x03\x01\x84Ra\x13d\x85\x83Qa\x11\x8EV[\x94P\x92\x85\x01\x92\x90\x85\x01\x90`\x01\x01a\x13HV[P\x92\x97\x96PPPPPPPV[`\0\x80`\0\x80\x84\x86\x03a\x01\0\x81\x12\x15a\x13\x9BW`\0\x80\xFD[`@\x81\x12\x15a\x13\xA9W`\0\x80\xFD[a\x13\xB1a\x12\x0EV[\x86Q\x81R` \x80\x88\x01Q\x90\x82\x01R\x94P`\x80`?\x19\x82\x01\x12\x15a\x13\xD3W`\0\x80\xFD[Pa\x13\xDCa\x127V[`@\x86\x01Q\x81R``\x86\x01Q` \x82\x01R`\x80\x86\x01Q`@\x82\x01R`\xA0\x86\x01Q``\x82\x01R\x80\x93PP`\xC0\x85\x01Q\x91P`\xE0\x85\x01Q\x90P\x92\x95\x91\x94P\x92PV\xFE\xA1dsolcC\0\x08\x17\0\n";
    /// The bytecode of the contract.
    pub static STAKETABLEHANDLER_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0bW`\x005`\xE0\x1C\x80c\x15]\xD5\xEE\x14a\0gW\x80c<\xF8\x0El\x14a\0|W\x80c\\\x05\x03G\x14a\0\x84W\x80cr\x1Ce\x13\x14a\0\xB3W\x80c\x7F\xAE\xB4\xEF\x14a\0\xC6W\x80c\xFC\x0CTj\x14a\0\xD9W[`\0\x80\xFD[a\0za\0u6`\x04a\x0FXV[a\0\xECV[\0[a\0za\x02PV[`\x0FTa\0\x97\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01`@Q\x80\x91\x03\x90\xF3[a\0za\0\xC16`\x04a\x0FXV[a\x039V[a\0za\0\xD46`\x04a\x0F\x8AV[a\x05\xD0V[`\x11Ta\0\x97\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\0a\x01\x0B\x82`\0`\x01`\x12\x80T\x90Pa\x01\x06\x91\x90a\x0F\xDFV[a\x05\xF5V[\x90P`\0`\x12\x82\x81T\x81\x10a\x01\"Wa\x01\"a\x0F\xF8V[`\0\x91\x82R` \x91\x82\x90 `@\x80Q`\x80\x81\x01\x82R`\x04\x93\x84\x02\x90\x92\x01\x80T\x83R`\x01\x81\x01T\x94\x83\x01\x94\x90\x94R`\x02\x84\x01T\x82\x82\x01R`\x03\x90\x93\x01T``\x82\x01R`\x10T\x92Qc\xCAf\x9F\xA7`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x93\x16\x91\x83\x01\x91\x90\x91R\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCAf\x9F\xA7\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x01\xBFW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x01\xD3W=`\0\x80>=`\0\xFD[PP`\x0FT`@Qc\x01\x84\x95\xE3`\xE3\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\x0C$\xAF\x18\x91Pa\x02\x07\x90\x84\x90`\x04\x01a\x10\x0EV[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x02&W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02J\x91\x90a\x109V[PPPPV[`\x14T`@\x80Qc\x0E\xCC\xE3\x01`\xE3\x1B\x81R\x90Q`\0\x92`\x01`\x01`\xA0\x1B\x03\x16\x91cvg\x18\x08\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x02\x9AW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xBE\x91\x90a\x109V[\x90P`\0a\x02\xCD\x82`\x01a\x10VV[`\x14T`@Qc9I\xD1\xE9`\xE0\x1B\x81Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16`\x04\x82\x01R\x91\x92P`\x01`\x01`\xA0\x1B\x03\x16\x90c9I\xD1\xE9\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x03\x1DW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x031W=`\0\x80>=`\0\xFD[PPPPPPV[`\0a\x03S\x82`\0`\x01`\x12\x80T\x90Pa\x01\x06\x91\x90a\x0F\xDFV[`\x10T`@Qc\xCAf\x9F\xA7`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\x04\x82\x01R\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCAf\x9F\xA7\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x03\xAFW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x03\xC3W=`\0\x80>=`\0\xFD[PP`\x0FT`\x12\x80T`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93PcJ\xA7\xC2\x7F\x92P\x90\x84\x90\x81\x10a\x03\xF1Wa\x03\xF1a\x0F\xF8V[\x90`\0R` `\0 \x90`\x04\x02\x01`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04?\x91\x90\x81T\x81R`\x01\x82\x01T` \x82\x01R`\x02\x82\x01T`@\x82\x01R`\x03\x90\x91\x01T``\x82\x01R`\x80\x01\x90V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x04^W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x82\x91\x90a\x10~V[P`\0`\x12\x82\x81T\x81\x10a\x04\x98Wa\x04\x98a\x0F\xF8V[\x90`\0R` `\0 \x90`\x04\x02\x01`@Q\x80`\x80\x01`@R\x90\x81`\0\x82\x01T\x81R` \x01`\x01\x82\x01T\x81R` \x01`\x02\x82\x01T\x81R` \x01`\x03\x82\x01T\x81RPP\x90P`\x12\x82\x81T\x81\x10a\x04\xEEWa\x04\xEEa\x0F\xF8V[`\0\x91\x82R` \x80\x83 `\x04\x92\x83\x02\x01\x83\x81U`\x01\x80\x82\x01\x85\x90U`\x02\x82\x01\x85\x90U`\x03\x90\x91\x01\x84\x90U`\x13\x80T\x91\x82\x01\x81U\x90\x93R\x83Q\x92\x90\x91\x02\x7Ff\xDE\x8F\xFD\xA7\x97\xE3\xDE\x9C\x05\xE8\xFCW\xB3\xBF\x0E\xC2\x8A\x93\r@\xB0\xD2\x85\xD9<\x06P\x1C\xF6\xA0\x90\x81\x01\x92\x90\x92U\x82\x01Q\x7Ff\xDE\x8F\xFD\xA7\x97\xE3\xDE\x9C\x05\xE8\xFCW\xB3\xBF\x0E\xC2\x8A\x93\r@\xB0\xD2\x85\xD9<\x06P\x1C\xF6\xA0\x91\x82\x01U`@\x82\x01Q\x7Ff\xDE\x8F\xFD\xA7\x97\xE3\xDE\x9C\x05\xE8\xFCW\xB3\xBF\x0E\xC2\x8A\x93\r@\xB0\xD2\x85\xD9<\x06P\x1C\xF6\xA0\x92\x82\x01U``\x90\x91\x01Q\x7Ff\xDE\x8F\xFD\xA7\x97\xE3\xDE\x9C\x05\xE8\xFCW\xB3\xBF\x0E\xC2\x8A\x93\r@\xB0\xD2\x85\xD9<\x06P\x1C\xF6\xA0\x93\x90\x91\x01UPPV[`\x10Ta\x05\xF1\x90`\x01`\x01`\xA0\x1B\x03\x16\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16a\x069V[PPV[`\0a\x06\x02\x84\x84\x84a\t\xF7V[\x90Pa\x062`@Q\x80`@\x01`@R\x80`\x0C\x81R` \x01k\x10\x9B\xDD[\x99\x08\x14\x99\\\xDD[\x1D`\xA2\x1B\x81RP\x82a\x0B\xBFV[\x93\x92PPPV[`\0\x80`\0a\x06H\x86\x86a\x0CYV[\x92P\x92P\x92P`\0a\x06]\x85`\0`da\x05\xF5V[`\x10T`@Qc\xCAf\x9F\xA7`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16`\x04\x82\x01R\x90\x91Pa\x03\xE8\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCAf\x9F\xA7\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x06\xBDW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x06\xD1W=`\0\x80>=`\0\xFD[PP`\x11T`@Qc\xA9\x05\x9C\xBB`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x8C\x81\x16`\x04\x83\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16`$\x83\x01R\x90\x91\x16\x92Pc\xA9\x05\x9C\xBB\x91P`D\x01` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x071W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07U\x91\x90a\x10~V[P`@Qc\xCAf\x9F\xA7`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x89\x16`\x04\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCAf\x9F\xA7\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x07\xABW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x07\xBFW=`\0\x80>=`\0\xFD[PP`\x11T`\x0FT`@Qc\t^\xA7\xB3`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\x04\x82\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16`$\x82\x01R\x91\x16\x92Pc\t^\xA7\xB3\x91P`D\x01` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x08!W=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08E\x91\x90a\x10~V[P`@Qc\xCAf\x9F\xA7`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x89\x16`\x04\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCAf\x9F\xA7\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x08\x9BW`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x08\xAFW=`\0\x80>=`\0\xFD[PP`\x0FT`@Qc\xC7,\xC7\x17`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x92Pc\xC7,\xC7\x17\x91Pa\x08\xEE\x90\x88\x90\x88\x90\x87\x90`\0\x90\x8A\x90\x89\x90`\x04\x01a\x10\xA0V[` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\t\rW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t1\x91\x90a\x10~V[PP`\x12\x80T`\x01\x81\x01\x82U`\0\x91\x90\x91R\x84Q\x7F\xBB\x8AjFi\xBA%\r&\xCDzE\x9E\xCA\x9D!_\x83\x07\xE3:\xEB\xE5\x03y\xBCZ6\x17\xEC4D`\x04\x90\x92\x02\x91\x82\x01U` \x85\x01Q\x7F\xBB\x8AjFi\xBA%\r&\xCDzE\x9E\xCA\x9D!_\x83\x07\xE3:\xEB\xE5\x03y\xBCZ6\x17\xEC4E\x82\x01U`@\x85\x01Q\x7F\xBB\x8AjFi\xBA%\r&\xCDzE\x9E\xCA\x9D!_\x83\x07\xE3:\xEB\xE5\x03y\xBCZ6\x17\xEC4F\x82\x01U``\x90\x94\x01Q\x7F\xBB\x8AjFi\xBA%\r&\xCDzE\x9E\xCA\x9D!_\x83\x07\xE3:\xEB\xE5\x03y\xBCZ6\x17\xEC4G\x90\x94\x01\x93\x90\x93UPPPPPPV[`\0\x81\x83\x11\x15a\nsW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`>`$\x82\x01R\x7FStdUtils bound(uint256,uint256,u`D\x82\x01R\x7Fint256): Max is less than min.\0\0`d\x82\x01R`\x84\x01`@Q\x80\x91\x03\x90\xFD[\x82\x84\x10\x15\x80\x15a\n\x83WP\x81\x84\x11\x15[\x15a\n\x8FWP\x82a\x062V[`\0a\n\x9B\x84\x84a\x0F\xDFV[a\n\xA6\x90`\x01a\x115V[\x90P`\x03\x85\x11\x15\x80\x15a\n\xB8WP\x84\x81\x11[\x15a\n\xCFWa\n\xC7\x85\x85a\x115V[\x91PPa\x062V[a\n\xDC`\x03`\0\x19a\x0F\xDFV[\x85\x10\x15\x80\x15a\n\xF5WPa\n\xF2\x85`\0\x19a\x0F\xDFV[\x81\x11[\x15a\x0B\x10Wa\x0B\x06\x85`\0\x19a\x0F\xDFV[a\n\xC7\x90\x84a\x0F\xDFV[\x82\x85\x11\x15a\x0BfW`\0a\x0B$\x84\x87a\x0F\xDFV[\x90P`\0a\x0B2\x83\x83a\x11HV[\x90P\x80`\0\x03a\x0BGW\x84\x93PPPPa\x062V[`\x01a\x0BS\x82\x88a\x115V[a\x0B]\x91\x90a\x0F\xDFV[\x93PPPa\x0B\xB7V[\x83\x85\x10\x15a\x0B\xB7W`\0a\x0Bz\x86\x86a\x0F\xDFV[\x90P`\0a\x0B\x88\x83\x83a\x11HV[\x90P\x80`\0\x03a\x0B\x9DW\x85\x93PPPPa\x062V[a\x0B\xA7\x81\x86a\x0F\xDFV[a\x0B\xB2\x90`\x01a\x115V[\x93PPP[P\x93\x92PPPV[`\0jconsole.log`\x01`\x01`\xA0\x1B\x03\x16\x83\x83`@Q`$\x01a\x0B\xE9\x92\x91\x90a\x11\xBAV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R` \x82\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c-\x83\x9C\xB3`\xE2\x1B\x17\x90RQa\x0C\x1E\x91\x90a\x11\xDCV[`\0`@Q\x80\x83\x03\x81\x85Z\xFA\x91PP=\x80`\0\x81\x14a\x031W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=`\0` \x84\x01>a\x031V[a\x0C\x84`@Q\x80`\x80\x01`@R\x80`\0\x81R` \x01`\0\x81R` \x01`\0\x81R` \x01`\0\x81RP\x90V[`@\x80Q\x80\x82\x01\x82R`\0\x80\x82R` \x80\x83\x01\x82\x90R\x83Q\x80\x85\x01\x85R\x82\x81R\x80\x82\x01\x83\x90R\x84Q`\x04\x80\x82R`\xA0\x82\x01\x90\x96R\x93\x94\x90\x93\x91\x82\x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x0C\xC0W\x90PP\x90P`@Q\x80`@\x01`@R\x80`\t\x81R` \x01h\x19\x1AY\x99\x8B]\x19\\\xDD`\xBA\x1B\x81RP\x81`\0\x81Q\x81\x10a\r\x0CWa\r\x0Ca\x0F\xF8V[` \x02` \x01\x01\x81\x90RP`@Q\x80`@\x01`@R\x80`\x11\x81R` \x01p\x19\xD9[\x8BX\xDB\x1AY[\x9D\x0B]\xD8[\x1B\x19]`z\x1B\x81RP\x81`\x01\x81Q\x81\x10a\rTWa\rTa\x0F\xF8V[` \x90\x81\x02\x91\x90\x91\x01\x01R`@Qc+e1\x1F`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x87\x16`\x04\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90cV\xCAb>\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\r\xB7W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\r\xDF\x91\x90\x81\x01\x90a\x12\xCEV[\x81`\x02\x81Q\x81\x10a\r\xF2Wa\r\xF2a\x0F\xF8V[` \x90\x81\x02\x91\x90\x91\x01\x01R`@Qc4\x80Q\xD7`\xE1\x1B\x81R`\xFF\x86\x16`\x04\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0EOW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0Ew\x91\x90\x81\x01\x90a\x12\xCEV[\x81`\x03\x81Q\x81\x10a\x0E\x8AWa\x0E\x8Aa\x0F\xF8V[` \x90\x81\x02\x91\x90\x91\x01\x01R`@Qc\x89\x16\x04g`\xE0\x1B\x81R`\0\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x89\x16\x04g\x90a\x0E\xCF\x90\x85\x90`\x04\x01a\x13\x1FV[`\0`@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x0E\xEEW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0F\x16\x91\x90\x81\x01\x90a\x12\xCEV[\x90P`\0\x80`\0\x80\x84\x80` \x01\x90Q\x81\x01\x90a\x0F2\x91\x90a\x13\x83V[`@\x80Q\x80\x82\x01\x90\x91R\x91\x82R` \x82\x01R\x90\x9AP\x98P\x96PPPPPPP\x92P\x92P\x92V[`\0` \x82\x84\x03\x12\x15a\x0FjW`\0\x80\xFD[P5\x91\x90PV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x0F\x87W`\0\x80\xFD[PV[`\0\x80`@\x83\x85\x03\x12\x15a\x0F\x9DW`\0\x80\xFD[\x825`\xFF\x81\x16\x81\x14a\x0F\xAEW`\0\x80\xFD[\x91P` \x83\x015a\x0F\xBE\x81a\x0FqV[\x80\x91PP\x92P\x92\x90PV[cNH{q`\xE0\x1B`\0R`\x11`\x04R`$`\0\xFD[\x81\x81\x03\x81\x81\x11\x15a\x0F\xF2Wa\x0F\xF2a\x0F\xC9V[\x92\x91PPV[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[\x81Q\x81R` \x80\x83\x01Q\x90\x82\x01R`@\x80\x83\x01Q\x90\x82\x01R``\x80\x83\x01Q\x90\x82\x01R`\x80\x81\x01a\x0F\xF2V[`\0` \x82\x84\x03\x12\x15a\x10KW`\0\x80\xFD[\x81Qa\x062\x81a\x0FqV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x81\x16\x83\x82\x16\x01\x90\x80\x82\x11\x15a\x10wWa\x10wa\x0F\xC9V[P\x92\x91PPV[`\0` \x82\x84\x03\x12\x15a\x10\x90W`\0\x80\xFD[\x81Q\x80\x15\x15\x81\x14a\x062W`\0\x80\xFD[\x86Q\x81R` \x80\x88\x01Q\x90\x82\x01R`@\x80\x88\x01Q\x90\x82\x01R``\x80\x88\x01Q\x90\x82\x01Ra\x01`\x81\x01\x86Q`\x80\x83\x01R` \x87\x01Q`\xA0\x83\x01Rg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x87\x16`\xC0\x84\x01R`\x02\x86\x10a\x11\x07WcNH{q`\xE0\x1B`\0R`!`\x04R`$`\0\xFD[\x85`\xE0\x84\x01R\x84Qa\x01\0\x84\x01R` \x85\x01Qa\x01 \x84\x01R\x80\x84\x16a\x01@\x84\x01RP\x97\x96PPPPPPPV[\x80\x82\x01\x80\x82\x11\x15a\x0F\xF2Wa\x0F\xF2a\x0F\xC9V[`\0\x82a\x11eWcNH{q`\xE0\x1B`\0R`\x12`\x04R`$`\0\xFD[P\x06\x90V[`\0[\x83\x81\x10\x15a\x11\x85W\x81\x81\x01Q\x83\x82\x01R` \x01a\x11mV[PP`\0\x91\x01RV[`\0\x81Q\x80\x84Ra\x11\xA6\x81` \x86\x01` \x86\x01a\x11jV[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[`@\x81R`\0a\x11\xCD`@\x83\x01\x85a\x11\x8EV[\x90P\x82` \x83\x01R\x93\x92PPPV[`\0\x82Qa\x11\xEE\x81\x84` \x87\x01a\x11jV[\x91\x90\x91\x01\x92\x91PPV[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[`@\x80Q\x90\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x121Wa\x121a\x11\xF8V[`@R\x90V[`@Q`\x80\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x121Wa\x121a\x11\xF8V[`\0g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x84\x11\x15a\x12uWa\x12ua\x11\xF8V[`@Q`\x1F\x85\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01\x90\x82\x82\x11\x81\x83\x10\x17\x15a\x12\x9DWa\x12\x9Da\x11\xF8V[\x81`@R\x80\x93P\x85\x81R\x86\x86\x86\x01\x11\x15a\x12\xB6W`\0\x80\xFD[a\x12\xC4\x86` \x83\x01\x87a\x11jV[PPP\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\x12\xE0W`\0\x80\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12\xF7W`\0\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x13\x08W`\0\x80\xFD[a\x13\x17\x84\x82Q` \x84\x01a\x12ZV[\x94\x93PPPPV[`\0` \x80\x83\x01` \x84R\x80\x85Q\x80\x83R`@\x86\x01\x91P`@\x81`\x05\x1B\x87\x01\x01\x92P` \x87\x01`\0[\x82\x81\x10\x15a\x13vW`?\x19\x88\x86\x03\x01\x84Ra\x13d\x85\x83Qa\x11\x8EV[\x94P\x92\x85\x01\x92\x90\x85\x01\x90`\x01\x01a\x13HV[P\x92\x97\x96PPPPPPPV[`\0\x80`\0\x80\x84\x86\x03a\x01\0\x81\x12\x15a\x13\x9BW`\0\x80\xFD[`@\x81\x12\x15a\x13\xA9W`\0\x80\xFD[a\x13\xB1a\x12\x0EV[\x86Q\x81R` \x80\x88\x01Q\x90\x82\x01R\x94P`\x80`?\x19\x82\x01\x12\x15a\x13\xD3W`\0\x80\xFD[Pa\x13\xDCa\x127V[`@\x86\x01Q\x81R``\x86\x01Q` \x82\x01R`\x80\x86\x01Q`@\x82\x01R`\xA0\x86\x01Q``\x82\x01R\x80\x93PP`\xC0\x85\x01Q\x91P`\xE0\x85\x01Q\x90P\x92\x95\x91\x94P\x92PV\xFE\xA1dsolcC\0\x08\x17\0\n";
    /// The deployed bytecode of the contract.
    pub static STAKETABLEHANDLER_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct StakeTableHandler<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for StakeTableHandler<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for StakeTableHandler<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for StakeTableHandler<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for StakeTableHandler<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(StakeTableHandler))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> StakeTableHandler<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                STAKETABLEHANDLER_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                STAKETABLEHANDLER_ABI.clone(),
                STAKETABLEHANDLER_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `advanceEpoch` (0x3cf80e6c) function
        pub fn advance_epoch(&self) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([60, 248, 14, 108], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `register` (0x7faeb4ef) function
        pub fn register(
            &self,
            seed: u8,
            amount: u64,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([127, 174, 180, 239], (seed, amount))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `requestExit` (0x721c6513) function
        pub fn request_exit(
            &self,
            rand: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([114, 28, 101, 19], rand)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `stakeTable` (0x5c050347) function
        pub fn stake_table(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([92, 5, 3, 71], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `token` (0xfc0c546a) function
        pub fn token(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::Address> {
            self.0
                .method_hash([252, 12, 84, 106], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `withdrawFunds` (0x155dd5ee) function
        pub fn withdraw_funds(
            &self,
            rand: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([21, 93, 213, 238], rand)
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for StakeTableHandler<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `advanceEpoch` function with signature `advanceEpoch()` and selector `0x3cf80e6c`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "advanceEpoch", abi = "advanceEpoch()")]
    pub struct AdvanceEpochCall;
    ///Container type for all input parameters for the `register` function with signature `register(uint8,uint64)` and selector `0x7faeb4ef`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "register", abi = "register(uint8,uint64)")]
    pub struct RegisterCall {
        pub seed: u8,
        pub amount: u64,
    }
    ///Container type for all input parameters for the `requestExit` function with signature `requestExit(uint256)` and selector `0x721c6513`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "requestExit", abi = "requestExit(uint256)")]
    pub struct RequestExitCall {
        pub rand: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `stakeTable` function with signature `stakeTable()` and selector `0x5c050347`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "stakeTable", abi = "stakeTable()")]
    pub struct StakeTableCall;
    ///Container type for all input parameters for the `token` function with signature `token()` and selector `0xfc0c546a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "token", abi = "token()")]
    pub struct TokenCall;
    ///Container type for all input parameters for the `withdrawFunds` function with signature `withdrawFunds(uint256)` and selector `0x155dd5ee`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "withdrawFunds", abi = "withdrawFunds(uint256)")]
    pub struct WithdrawFundsCall {
        pub rand: ::ethers::core::types::U256,
    }
    ///Container type for all of the contract's call
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        serde::Serialize,
        serde::Deserialize,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub enum StakeTableHandlerCalls {
        AdvanceEpoch(AdvanceEpochCall),
        Register(RegisterCall),
        RequestExit(RequestExitCall),
        StakeTable(StakeTableCall),
        Token(TokenCall),
        WithdrawFunds(WithdrawFundsCall),
    }
    impl ::ethers::core::abi::AbiDecode for StakeTableHandlerCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <AdvanceEpochCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::AdvanceEpoch(decoded));
            }
            if let Ok(decoded) = <RegisterCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Register(decoded));
            }
            if let Ok(decoded) = <RequestExitCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::RequestExit(decoded));
            }
            if let Ok(decoded) = <StakeTableCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::StakeTable(decoded));
            }
            if let Ok(decoded) = <TokenCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Token(decoded));
            }
            if let Ok(decoded) = <WithdrawFundsCall as ::ethers::core::abi::AbiDecode>::decode(data)
            {
                return Ok(Self::WithdrawFunds(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for StakeTableHandlerCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::AdvanceEpoch(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Register(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::RequestExit(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::StakeTable(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Token(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::WithdrawFunds(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for StakeTableHandlerCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::AdvanceEpoch(element) => ::core::fmt::Display::fmt(element, f),
                Self::Register(element) => ::core::fmt::Display::fmt(element, f),
                Self::RequestExit(element) => ::core::fmt::Display::fmt(element, f),
                Self::StakeTable(element) => ::core::fmt::Display::fmt(element, f),
                Self::Token(element) => ::core::fmt::Display::fmt(element, f),
                Self::WithdrawFunds(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<AdvanceEpochCall> for StakeTableHandlerCalls {
        fn from(value: AdvanceEpochCall) -> Self {
            Self::AdvanceEpoch(value)
        }
    }
    impl ::core::convert::From<RegisterCall> for StakeTableHandlerCalls {
        fn from(value: RegisterCall) -> Self {
            Self::Register(value)
        }
    }
    impl ::core::convert::From<RequestExitCall> for StakeTableHandlerCalls {
        fn from(value: RequestExitCall) -> Self {
            Self::RequestExit(value)
        }
    }
    impl ::core::convert::From<StakeTableCall> for StakeTableHandlerCalls {
        fn from(value: StakeTableCall) -> Self {
            Self::StakeTable(value)
        }
    }
    impl ::core::convert::From<TokenCall> for StakeTableHandlerCalls {
        fn from(value: TokenCall) -> Self {
            Self::Token(value)
        }
    }
    impl ::core::convert::From<WithdrawFundsCall> for StakeTableHandlerCalls {
        fn from(value: WithdrawFundsCall) -> Self {
            Self::WithdrawFunds(value)
        }
    }
    ///Container type for all return fields from the `stakeTable` function with signature `stakeTable()` and selector `0x5c050347`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct StakeTableReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `token` function with signature `token()` and selector `0xfc0c546a`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct TokenReturn(pub ::ethers::core::types::Address);
}
