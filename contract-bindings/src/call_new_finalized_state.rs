pub use call_new_finalized_state::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types
)]
pub mod call_new_finalized_state {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::None,
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("IS_SCRIPT"),
                    ::std::vec![::ethers::core::abi::ethabi::Function {
                        name: ::std::borrow::ToOwned::to_owned("IS_SCRIPT"),
                        inputs: ::std::vec![],
                        outputs: ::std::vec![::ethers::core::abi::ethabi::Param {
                            name: ::std::string::String::new(),
                            kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                            internal_type: ::core::option::Option::Some(
                                ::std::borrow::ToOwned::to_owned("bool"),
                            ),
                        },],
                        constant: ::core::option::Option::None,
                        state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                    },],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("genesis"),
                    ::std::vec![::ethers::core::abi::ethabi::Function {
                        name: ::std::borrow::ToOwned::to_owned("genesis"),
                        inputs: ::std::vec![],
                        outputs: ::std::vec![
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("viewNum"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Uint(64usize),
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("uint64"),
                                ),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("blockHeight"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Uint(64usize),
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("uint64"),
                                ),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("blockCommRoot"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Uint(256usize,),
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("BN254.ScalarField"),
                                ),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("feeLedgerComm"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Uint(256usize,),
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("BN254.ScalarField"),
                                ),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("stakeTableBlsKeyComm",),
                                kind: ::ethers::core::abi::ethabi::ParamType::Uint(256usize,),
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("BN254.ScalarField"),
                                ),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("stakeTableSchnorrKeyComm",),
                                kind: ::ethers::core::abi::ethabi::ParamType::Uint(256usize,),
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("BN254.ScalarField"),
                                ),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("stakeTableAmountComm",),
                                kind: ::ethers::core::abi::ethabi::ParamType::Uint(256usize,),
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("BN254.ScalarField"),
                                ),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("threshold"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Uint(256usize,),
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("uint256"),
                                ),
                            },
                        ],
                        constant: ::core::option::Option::None,
                        state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                    },],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("run"),
                    ::std::vec![::ethers::core::abi::ethabi::Function {
                        name: ::std::borrow::ToOwned::to_owned("run"),
                        inputs: ::std::vec![
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("numBlocksPerEpoch"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Uint(32usize),
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("uint32"),
                                ),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("numInitValidators"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Uint(32usize),
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("uint32"),
                                ),
                            },
                            ::ethers::core::abi::ethabi::Param {
                                name: ::std::borrow::ToOwned::to_owned("lcContractAddress"),
                                kind: ::ethers::core::abi::ethabi::ParamType::Address,
                                internal_type: ::core::option::Option::Some(
                                    ::std::borrow::ToOwned::to_owned("address"),
                                ),
                            },
                        ],
                        outputs: ::std::vec![],
                        constant: ::core::option::Option::None,
                        state_mutability: ::ethers::core::abi::ethabi::StateMutability::NonPayable,
                    },],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static CALLNEWFINALIZEDSTATE_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> =
        ::ethers::contract::Lazy::new(__abi);
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@R`\x04\x80T`\x01`\xFF\x19\x91\x82\x16\x81\x17\x90\x92U`\x0C\x80T\x90\x91\x16\x90\x91\x17\x90U4\x80\x15a\0-W`\0\x80\xFD[Pa\x11\x10\x80a\0=`\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0AW`\x005`\xE0\x1C\x80c\x83\xDE\xD0n\x14a\0FW\x80c\xA7\xF0\xB3\xDE\x14a\0[W\x80c\xF8\xCC\xBFG\x14a\0\xE5W[`\0\x80\xFD[a\0Ya\0T6`\x04a\x08LV[a\x01\x02V[\0[`\rT`\x0ET`\x0FT`\x10T`\x11T`\x12T`\x13Ta\0\x9A\x96`\x01`\x01`@\x1B\x03\x80\x82\x16\x97h\x01\0\0\0\0\0\0\0\0\x90\x92\x04\x16\x95\x90\x94\x90\x93\x90\x92\x90\x91\x88V[`@\x80Q`\x01`\x01`@\x1B\x03\x99\x8A\x16\x81R\x98\x90\x97\x16` \x89\x01R\x95\x87\x01\x94\x90\x94R``\x86\x01\x92\x90\x92R`\x80\x85\x01R`\xA0\x84\x01R`\xC0\x83\x01R`\xE0\x82\x01Ra\x01\0\x01[`@Q\x80\x91\x03\x90\xF3[`\x0CTa\0\xF2\x90`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0\xDCV[`@\x80Q`\x04\x80\x82R`\xA0\x82\x01\x90\x92R`\x03\x91\x82\x91`\0\x91\x81` \x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x01\x1FWPP`@\x80Q`\x06\x80\x82R`\xE0\x82\x01\x90\x92R\x91\x92P` \x82\x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x01KW\x90PP\x90P`@Q\x80`@\x01`@R\x80`\t\x81R` \x01h\x19\x1AY\x99\x8B]\x19\\\xDD`\xBA\x1B\x81RP\x81`\0\x81Q\x81\x10a\x01\x97Wa\x01\x97a\x08\xA9V[` \x02` \x01\x01\x81\x90RP`@Q\x80``\x01`@R\x80`!\x81R` \x01a\x10\xE3`!\x919\x81`\x01\x81Q\x81\x10a\x01\xCEWa\x01\xCEa\x08\xA9V[` \x90\x81\x02\x91\x90\x91\x01\x01R`@Qc4\x80Q\xD7`\xE1\x1B\x81Rc\xFF\xFF\xFF\xFF\x87\x16`\x04\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02.W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x02V\x91\x90\x81\x01\x90a\t\xB4V[\x81`\x02\x81Q\x81\x10a\x02iWa\x02ia\x08\xA9V[` \x90\x81\x02\x91\x90\x91\x01\x01R`@Qc4\x80Q\xD7`\xE1\x1B\x81Rc\xFF\xFF\xFF\xFF\x86\x16`\x04\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\xC9W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x02\xF1\x91\x90\x81\x01\x90a\t\xB4V[\x81`\x03\x81Q\x81\x10a\x03\x04Wa\x03\x04a\x08\xA9V[` \x90\x81\x02\x91\x90\x91\x01\x01R`@Qc4\x80Q\xD7`\xE1\x1B\x81R`\x01`\x01`@\x1B\x03\x84\x16`\x04\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03gW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x03\x8F\x91\x90\x81\x01\x90a\t\xB4V[\x81`\x04\x81Q\x81\x10a\x03\xA2Wa\x03\xA2a\x08\xA9V[` \x90\x81\x02\x91\x90\x91\x01\x01R`@Qc4\x80Q\xD7`\xE1\x1B\x81R`\x01`\x01`@\x1B\x03\x83\x16`\x04\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\x05W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x04-\x91\x90\x81\x01\x90a\t\xB4V[\x81`\x05\x81Q\x81\x10a\x04@Wa\x04@a\x08\xA9V[` \x90\x81\x02\x91\x90\x91\x01\x01R`@Qc\x89\x16\x04g`\xE0\x1B\x81R`\0\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x89\x16\x04g\x90a\x04\x85\x90\x85\x90`\x04\x01a\n0V[`\0`@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x04\xA4W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x04\xCC\x91\x90\x81\x01\x90a\t\xB4V[\x90P`\0\x80\x82\x80` \x01\x90Q\x81\x01\x90a\x04\xE5\x91\x90a\r\x1BV[`@Qc\xF8w\xCB\x19`\xE0\x1B\x81R` `\x04\x82\x01R`\x08`$\x82\x01RgMNEMONIC`\xC0\x1B`D\x82\x01R\x91\x93P\x91P`\0\x90\x81\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xF8w\xCB\x19\x90`d\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05WW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x05\x7F\x91\x90\x81\x01\x90a\t\xB4V[\x90Pa\x05\x8C\x81`\0a\x07\x1AV[P`@Qc\x7F\xEC*\x8D`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x16`\x04\x82\x01R\x90\x92Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x7F\xEC*\x8D\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x05\xE5W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x05\xF9W=`\0\x80>=`\0\xFD[PPPP`\0\x89\x90P\x80`\x01`\x01`\xA0\x1B\x03\x16c@\x999\xB7\x86`\0\x81Q\x81\x10a\x06$Wa\x06$a\x08\xA9V[` \x02` \x01\x01Q\x86`\0\x81Q\x81\x10a\x06?Wa\x06?a\x08\xA9V[` \x02` \x01\x01Q`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x06d\x92\x91\x90a\x0EGV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x06~W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x06\x92W=`\0\x80>=`\0\xFD[PPPP\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-`\0\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x06\xF4W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x07\x08W=`\0\x80>=`\0\xFD[PPPPPPPPPPPPPPPPV[`@Qcb)I\x8B`\xE0\x1B\x81R`\0\x90\x81\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90cb)I\x8B\x90a\x07X\x90\x87\x90\x87\x90`\x04\x01a\x10\x84V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07uW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\x99\x91\x90a\x10\xACV[`@Qc\x08\x84\0\x19`\xE2\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\"\x10\0d\x90`$\x01` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x07\xEEW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\x12\x91\x90a\x10\xC5V[\x91P\x92P\x92\x90PV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x08/W`\0\x80\xFD[\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x08IW`\0\x80\xFD[PV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x08aW`\0\x80\xFD[a\x08j\x84a\x08\x1BV[\x92Pa\x08x` \x85\x01a\x08\x1BV[\x91P`@\x84\x015a\x08\x88\x81a\x084V[\x80\x91PP\x92P\x92P\x92V[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[`@Qa\x02\xE0\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\x08\xE2Wa\x08\xE2a\x08\x93V[`@R\x90V[`@Qa\x01\0\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\x08\xE2Wa\x08\xE2a\x08\x93V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\t3Wa\t3a\x08\x93V[`@R\x91\x90PV[`\0[\x83\x81\x10\x15a\tVW\x81\x81\x01Q\x83\x82\x01R` \x01a\t>V[PP`\0\x91\x01RV[`\0`\x01`\x01`@\x1B\x03\x83\x11\x15a\txWa\txa\x08\x93V[a\t\x8B`\x1F\x84\x01`\x1F\x19\x16` \x01a\t\x0BV[\x90P\x82\x81R\x83\x83\x83\x01\x11\x15a\t\x9FW`\0\x80\xFD[a\t\xAD\x83` \x83\x01\x84a\t;V[\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\t\xC6W`\0\x80\xFD[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\t\xDCW`\0\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\t\xEDW`\0\x80\xFD[a\t\xFC\x84\x82Q` \x84\x01a\t_V[\x94\x93PPPPV[`\0\x81Q\x80\x84Ra\n\x1C\x81` \x86\x01` \x86\x01a\t;V[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[`\0` \x80\x83\x01` \x84R\x80\x85Q\x80\x83R`@\x86\x01\x91P`@\x81`\x05\x1B\x87\x01\x01\x92P` \x87\x01`\0[\x82\x81\x10\x15a\n\x87W`?\x19\x88\x86\x03\x01\x84Ra\nu\x85\x83Qa\n\x04V[\x94P\x92\x85\x01\x92\x90\x85\x01\x90`\x01\x01a\nYV[P\x92\x97\x96PPPPPPPV[`\0`\x01`\x01`@\x1B\x03\x82\x11\x15a\n\xADWa\n\xADa\x08\x93V[P`\x05\x1B` \x01\x90V[\x80Q`\x01`\x01`@\x1B\x03\x81\x16\x81\x14a\x08/W`\0\x80\xFD[`\0`@\x82\x84\x03\x12\x15a\n\xE0W`\0\x80\xFD[`@Q`@\x81\x01\x81\x81\x10`\x01`\x01`@\x1B\x03\x82\x11\x17\x15a\x0B\x02Wa\x0B\x02a\x08\x93V[`@R\x82Q\x81R` \x92\x83\x01Q\x92\x81\x01\x92\x90\x92RP\x91\x90PV[`\0\x82`\x1F\x83\x01\x12a\x0B-W`\0\x80\xFD[\x81Qa\x0B@a\x0B;\x82a\n\x94V[a\t\x0BV[\x80\x82\x82R` \x82\x01\x91Pa\x04\x80` \x81\x85\x02\x87\x01\x01\x93P\x86\x84\x11\x15a\x0BdW`\0\x80\xFD[` \x86\x01[\x84\x81\x10\x15a\r\x0FW\x81\x81\x89\x03\x12\x15a\x0B\x81W`\0\x80\x81\xFD[a\x0B\x89a\x08\xBFV[a\x0B\x93\x89\x83a\n\xCEV[\x81R`@a\x0B\xA3\x8A\x82\x85\x01a\n\xCEV[` \x83\x01R`\x80a\x0B\xB6\x8B\x82\x86\x01a\n\xCEV[\x82\x84\x01R`\xC0\x91Pa\x0B\xCA\x8B\x83\x86\x01a\n\xCEV[``\x84\x01Ra\x01\0a\x0B\xDE\x8C\x82\x87\x01a\n\xCEV[\x82\x85\x01Ra\x01@\x91Pa\x0B\xF3\x8C\x83\x87\x01a\n\xCEV[`\xA0\x85\x01Ra\x01\x80a\x0C\x07\x8D\x82\x88\x01a\n\xCEV[\x84\x86\x01Ra\x01\xC0\x93Pa\x0C\x1C\x8D\x85\x88\x01a\n\xCEV[`\xE0\x86\x01Ra\x02\0a\x0C0\x8E\x82\x89\x01a\n\xCEV[\x83\x87\x01Ra\x02@\x92Pa\x0CE\x8E\x84\x89\x01a\n\xCEV[a\x01 \x87\x01Ra\x02\x80a\x0CZ\x8F\x82\x8A\x01a\n\xCEV[\x85\x88\x01Ra\x02\xC0\x94Pa\x0Co\x8F\x86\x8A\x01a\n\xCEV[a\x01`\x88\x01Ra\x0C\x83\x8Fa\x03\0\x8A\x01a\n\xCEV[\x83\x88\x01Ra\x03@\x88\x01Qa\x01\xA0\x88\x01Ra\x03`\x88\x01Q\x86\x88\x01Ra\x03\x80\x88\x01Qa\x01\xE0\x88\x01Ra\x03\xA0\x88\x01Q\x82\x88\x01Ra\x03\xC0\x88\x01Qa\x02 \x88\x01Ra\x03\xE0\x88\x01Q\x84\x88\x01Ra\x04\0\x88\x01Qa\x02`\x88\x01Ra\x04 \x88\x01Q\x81\x88\x01RPPPPa\x04@\x84\x01Qa\x02\xA0\x84\x01Ra\x04`\x84\x01Q\x81\x84\x01RPP\x80\x85RP` \x84\x01\x93P\x81\x81\x01\x90Pa\x0BiV[P\x90\x96\x95PPPPPPV[`\0\x80`@\x80\x84\x86\x03\x12\x15a\r/W`\0\x80\xFD[\x83Q`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\rFW`\0\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\rZW`\0\x80\xFD[\x81Q` a\rja\x0B;\x83a\n\x94V[\x82\x81R`\x08\x92\x90\x92\x1B\x84\x01\x81\x01\x91\x81\x81\x01\x90\x8A\x84\x11\x15a\r\x89W`\0\x80\xFD[\x94\x82\x01\x94[\x83\x86\x10\x15a\x0E\x16Wa\x01\0\x86\x8C\x03\x12\x15a\r\xA8W`\0\x80\x81\xFD[a\r\xB0a\x08\xE8V[a\r\xB9\x87a\n\xB7V[\x81Ra\r\xC6\x84\x88\x01a\n\xB7V[\x81\x85\x01R\x86\x88\x01Q\x88\x82\x01R``\x80\x88\x01Q\x90\x82\x01R`\x80\x80\x88\x01Q\x90\x82\x01R`\xA0\x80\x88\x01Q\x90\x82\x01R`\xC0\x80\x88\x01Q\x90\x82\x01R`\xE0\x80\x88\x01Q\x90\x82\x01R\x82Ra\x01\0\x90\x95\x01\x94\x90\x82\x01\x90a\r\x8EV[\x91\x89\x01Q\x91\x97P\x90\x94PPP\x80\x83\x11\x15a\x0E/W`\0\x80\xFD[PPa\x0E=\x85\x82\x86\x01a\x0B\x1CV[\x91PP\x92P\x92\x90PV[`\0a\x05\x80\x82\x01\x90P`\x01`\x01`@\x1B\x03\x80\x85Q\x16\x83R\x80` \x86\x01Q\x16` \x84\x01RP`@\x84\x01Q`@\x83\x01R``\x84\x01Q``\x83\x01R`\x80\x84\x01Q`\x80\x83\x01R`\xA0\x84\x01Q`\xA0\x83\x01R`\xC0\x84\x01Q`\xC0\x83\x01R`\xE0\x84\x01Q`\xE0\x83\x01Ra\x01\0a\x0E\xC1\x81\x84\x01\x85Q\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[` \x84\x01Qa\x01@a\x0E\xDF\x81\x86\x01\x83\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[`@\x86\x01Q\x91Pa\x01\x80a\x0E\xFF\x81\x87\x01\x84\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[``\x87\x01Q\x92Pa\x01\xC0a\x0F\x1F\x81\x88\x01\x85\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[`\x80\x88\x01Q\x93Pa\x02\0a\x0F?\x81\x89\x01\x86\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[`\xA0\x89\x01Q\x94Pa\x02@a\x0F_\x81\x8A\x01\x87\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[`\xC0\x8A\x01Q\x95Pa\x02\x80a\x0F\x7F\x81\x8B\x01\x88\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[`\xE0\x8B\x01Q\x96Pa\x02\xC0a\x0F\x9F\x81\x8C\x01\x89\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[\x97\x8B\x01Q\x80Qa\x03\0\x8C\x01R` \x90\x81\x01Qa\x03 \x8C\x01Ra\x01 \x8C\x01Q\x80Qa\x03@\x8D\x01R\x81\x01Qa\x03`\x8C\x01R\x95\x8B\x01Q\x80Qa\x03\x80\x8C\x01R\x86\x01Qa\x03\xA0\x8B\x01Ra\x01`\x8B\x01Q\x80Qa\x03\xC0\x8C\x01R\x86\x01Qa\x03\xE0\x8B\x01R\x93\x8A\x01Q\x80Qa\x04\0\x8B\x01R\x90\x94\x01Qa\x04 \x89\x01Ra\x01\xA0\x89\x01Qa\x04@\x89\x01R\x90\x88\x01Qa\x04`\x88\x01Ra\x01\xE0\x88\x01Qa\x04\x80\x88\x01R\x87\x01Qa\x04\xA0\x87\x01Ra\x02 \x87\x01Qa\x04\xC0\x87\x01R\x90\x86\x01Qa\x04\xE0\x86\x01Ra\x02`\x86\x01Qa\x05\0\x86\x01R\x85\x01Qa\x05 \x85\x01RPa\x02\xA0\x84\x01Qa\x05@\x84\x01R\x92\x90\x92\x01Qa\x05`\x90\x91\x01R\x91\x90PV[`@\x81R`\0a\x10\x97`@\x83\x01\x85a\n\x04V[\x90Pc\xFF\xFF\xFF\xFF\x83\x16` \x83\x01R\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\x10\xBEW`\0\x80\xFD[PQ\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x10\xD7W`\0\x80\xFD[\x81Qa\t\xAD\x81a\x084V\xFEmock-consecutive-finalized-states\xA1dsolcC\0\x08\x17\0\n";
    /// The bytecode of the contract.
    pub static CALLNEWFINALIZEDSTATE_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__BYTECODE);
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0AW`\x005`\xE0\x1C\x80c\x83\xDE\xD0n\x14a\0FW\x80c\xA7\xF0\xB3\xDE\x14a\0[W\x80c\xF8\xCC\xBFG\x14a\0\xE5W[`\0\x80\xFD[a\0Ya\0T6`\x04a\x08LV[a\x01\x02V[\0[`\rT`\x0ET`\x0FT`\x10T`\x11T`\x12T`\x13Ta\0\x9A\x96`\x01`\x01`@\x1B\x03\x80\x82\x16\x97h\x01\0\0\0\0\0\0\0\0\x90\x92\x04\x16\x95\x90\x94\x90\x93\x90\x92\x90\x91\x88V[`@\x80Q`\x01`\x01`@\x1B\x03\x99\x8A\x16\x81R\x98\x90\x97\x16` \x89\x01R\x95\x87\x01\x94\x90\x94R``\x86\x01\x92\x90\x92R`\x80\x85\x01R`\xA0\x84\x01R`\xC0\x83\x01R`\xE0\x82\x01Ra\x01\0\x01[`@Q\x80\x91\x03\x90\xF3[`\x0CTa\0\xF2\x90`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0\xDCV[`@\x80Q`\x04\x80\x82R`\xA0\x82\x01\x90\x92R`\x03\x91\x82\x91`\0\x91\x81` \x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x01\x1FWPP`@\x80Q`\x06\x80\x82R`\xE0\x82\x01\x90\x92R\x91\x92P` \x82\x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x01KW\x90PP\x90P`@Q\x80`@\x01`@R\x80`\t\x81R` \x01h\x19\x1AY\x99\x8B]\x19\\\xDD`\xBA\x1B\x81RP\x81`\0\x81Q\x81\x10a\x01\x97Wa\x01\x97a\x08\xA9V[` \x02` \x01\x01\x81\x90RP`@Q\x80``\x01`@R\x80`!\x81R` \x01a\x10\xE3`!\x919\x81`\x01\x81Q\x81\x10a\x01\xCEWa\x01\xCEa\x08\xA9V[` \x90\x81\x02\x91\x90\x91\x01\x01R`@Qc4\x80Q\xD7`\xE1\x1B\x81Rc\xFF\xFF\xFF\xFF\x87\x16`\x04\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02.W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x02V\x91\x90\x81\x01\x90a\t\xB4V[\x81`\x02\x81Q\x81\x10a\x02iWa\x02ia\x08\xA9V[` \x90\x81\x02\x91\x90\x91\x01\x01R`@Qc4\x80Q\xD7`\xE1\x1B\x81Rc\xFF\xFF\xFF\xFF\x86\x16`\x04\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\xC9W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x02\xF1\x91\x90\x81\x01\x90a\t\xB4V[\x81`\x03\x81Q\x81\x10a\x03\x04Wa\x03\x04a\x08\xA9V[` \x90\x81\x02\x91\x90\x91\x01\x01R`@Qc4\x80Q\xD7`\xE1\x1B\x81R`\x01`\x01`@\x1B\x03\x84\x16`\x04\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03gW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x03\x8F\x91\x90\x81\x01\x90a\t\xB4V[\x81`\x04\x81Q\x81\x10a\x03\xA2Wa\x03\xA2a\x08\xA9V[` \x90\x81\x02\x91\x90\x91\x01\x01R`@Qc4\x80Q\xD7`\xE1\x1B\x81R`\x01`\x01`@\x1B\x03\x83\x16`\x04\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\x05W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x04-\x91\x90\x81\x01\x90a\t\xB4V[\x81`\x05\x81Q\x81\x10a\x04@Wa\x04@a\x08\xA9V[` \x90\x81\x02\x91\x90\x91\x01\x01R`@Qc\x89\x16\x04g`\xE0\x1B\x81R`\0\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x89\x16\x04g\x90a\x04\x85\x90\x85\x90`\x04\x01a\n0V[`\0`@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x04\xA4W=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x04\xCC\x91\x90\x81\x01\x90a\t\xB4V[\x90P`\0\x80\x82\x80` \x01\x90Q\x81\x01\x90a\x04\xE5\x91\x90a\r\x1BV[`@Qc\xF8w\xCB\x19`\xE0\x1B\x81R` `\x04\x82\x01R`\x08`$\x82\x01RgMNEMONIC`\xC0\x1B`D\x82\x01R\x91\x93P\x91P`\0\x90\x81\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xF8w\xCB\x19\x90`d\x01`\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05WW=`\0\x80>=`\0\xFD[PPPP`@Q=`\0\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x05\x7F\x91\x90\x81\x01\x90a\t\xB4V[\x90Pa\x05\x8C\x81`\0a\x07\x1AV[P`@Qc\x7F\xEC*\x8D`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x16`\x04\x82\x01R\x90\x92Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x7F\xEC*\x8D\x90`$\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x05\xE5W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x05\xF9W=`\0\x80>=`\0\xFD[PPPP`\0\x89\x90P\x80`\x01`\x01`\xA0\x1B\x03\x16c@\x999\xB7\x86`\0\x81Q\x81\x10a\x06$Wa\x06$a\x08\xA9V[` \x02` \x01\x01Q\x86`\0\x81Q\x81\x10a\x06?Wa\x06?a\x08\xA9V[` \x02` \x01\x01Q`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x06d\x92\x91\x90a\x0EGV[`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x06~W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x06\x92W=`\0\x80>=`\0\xFD[PPPP\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-`\0\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\0`@Q\x80\x83\x03\x81`\0\x87\x80;\x15\x80\x15a\x06\xF4W`\0\x80\xFD[PZ\xF1\x15\x80\x15a\x07\x08W=`\0\x80>=`\0\xFD[PPPPPPPPPPPPPPPPV[`@Qcb)I\x8B`\xE0\x1B\x81R`\0\x90\x81\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90cb)I\x8B\x90a\x07X\x90\x87\x90\x87\x90`\x04\x01a\x10\x84V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07uW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\x99\x91\x90a\x10\xACV[`@Qc\x08\x84\0\x19`\xE2\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\"\x10\0d\x90`$\x01` `@Q\x80\x83\x03\x81`\0\x87Z\xF1\x15\x80\x15a\x07\xEEW=`\0\x80>=`\0\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\x12\x91\x90a\x10\xC5V[\x91P\x92P\x92\x90PV[\x805c\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x08/W`\0\x80\xFD[\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x08IW`\0\x80\xFD[PV[`\0\x80`\0``\x84\x86\x03\x12\x15a\x08aW`\0\x80\xFD[a\x08j\x84a\x08\x1BV[\x92Pa\x08x` \x85\x01a\x08\x1BV[\x91P`@\x84\x015a\x08\x88\x81a\x084V[\x80\x91PP\x92P\x92P\x92V[cNH{q`\xE0\x1B`\0R`A`\x04R`$`\0\xFD[cNH{q`\xE0\x1B`\0R`2`\x04R`$`\0\xFD[`@Qa\x02\xE0\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\x08\xE2Wa\x08\xE2a\x08\x93V[`@R\x90V[`@Qa\x01\0\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\x08\xE2Wa\x08\xE2a\x08\x93V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\t3Wa\t3a\x08\x93V[`@R\x91\x90PV[`\0[\x83\x81\x10\x15a\tVW\x81\x81\x01Q\x83\x82\x01R` \x01a\t>V[PP`\0\x91\x01RV[`\0`\x01`\x01`@\x1B\x03\x83\x11\x15a\txWa\txa\x08\x93V[a\t\x8B`\x1F\x84\x01`\x1F\x19\x16` \x01a\t\x0BV[\x90P\x82\x81R\x83\x83\x83\x01\x11\x15a\t\x9FW`\0\x80\xFD[a\t\xAD\x83` \x83\x01\x84a\t;V[\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\t\xC6W`\0\x80\xFD[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\t\xDCW`\0\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\t\xEDW`\0\x80\xFD[a\t\xFC\x84\x82Q` \x84\x01a\t_V[\x94\x93PPPPV[`\0\x81Q\x80\x84Ra\n\x1C\x81` \x86\x01` \x86\x01a\t;V[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[`\0` \x80\x83\x01` \x84R\x80\x85Q\x80\x83R`@\x86\x01\x91P`@\x81`\x05\x1B\x87\x01\x01\x92P` \x87\x01`\0[\x82\x81\x10\x15a\n\x87W`?\x19\x88\x86\x03\x01\x84Ra\nu\x85\x83Qa\n\x04V[\x94P\x92\x85\x01\x92\x90\x85\x01\x90`\x01\x01a\nYV[P\x92\x97\x96PPPPPPPV[`\0`\x01`\x01`@\x1B\x03\x82\x11\x15a\n\xADWa\n\xADa\x08\x93V[P`\x05\x1B` \x01\x90V[\x80Q`\x01`\x01`@\x1B\x03\x81\x16\x81\x14a\x08/W`\0\x80\xFD[`\0`@\x82\x84\x03\x12\x15a\n\xE0W`\0\x80\xFD[`@Q`@\x81\x01\x81\x81\x10`\x01`\x01`@\x1B\x03\x82\x11\x17\x15a\x0B\x02Wa\x0B\x02a\x08\x93V[`@R\x82Q\x81R` \x92\x83\x01Q\x92\x81\x01\x92\x90\x92RP\x91\x90PV[`\0\x82`\x1F\x83\x01\x12a\x0B-W`\0\x80\xFD[\x81Qa\x0B@a\x0B;\x82a\n\x94V[a\t\x0BV[\x80\x82\x82R` \x82\x01\x91Pa\x04\x80` \x81\x85\x02\x87\x01\x01\x93P\x86\x84\x11\x15a\x0BdW`\0\x80\xFD[` \x86\x01[\x84\x81\x10\x15a\r\x0FW\x81\x81\x89\x03\x12\x15a\x0B\x81W`\0\x80\x81\xFD[a\x0B\x89a\x08\xBFV[a\x0B\x93\x89\x83a\n\xCEV[\x81R`@a\x0B\xA3\x8A\x82\x85\x01a\n\xCEV[` \x83\x01R`\x80a\x0B\xB6\x8B\x82\x86\x01a\n\xCEV[\x82\x84\x01R`\xC0\x91Pa\x0B\xCA\x8B\x83\x86\x01a\n\xCEV[``\x84\x01Ra\x01\0a\x0B\xDE\x8C\x82\x87\x01a\n\xCEV[\x82\x85\x01Ra\x01@\x91Pa\x0B\xF3\x8C\x83\x87\x01a\n\xCEV[`\xA0\x85\x01Ra\x01\x80a\x0C\x07\x8D\x82\x88\x01a\n\xCEV[\x84\x86\x01Ra\x01\xC0\x93Pa\x0C\x1C\x8D\x85\x88\x01a\n\xCEV[`\xE0\x86\x01Ra\x02\0a\x0C0\x8E\x82\x89\x01a\n\xCEV[\x83\x87\x01Ra\x02@\x92Pa\x0CE\x8E\x84\x89\x01a\n\xCEV[a\x01 \x87\x01Ra\x02\x80a\x0CZ\x8F\x82\x8A\x01a\n\xCEV[\x85\x88\x01Ra\x02\xC0\x94Pa\x0Co\x8F\x86\x8A\x01a\n\xCEV[a\x01`\x88\x01Ra\x0C\x83\x8Fa\x03\0\x8A\x01a\n\xCEV[\x83\x88\x01Ra\x03@\x88\x01Qa\x01\xA0\x88\x01Ra\x03`\x88\x01Q\x86\x88\x01Ra\x03\x80\x88\x01Qa\x01\xE0\x88\x01Ra\x03\xA0\x88\x01Q\x82\x88\x01Ra\x03\xC0\x88\x01Qa\x02 \x88\x01Ra\x03\xE0\x88\x01Q\x84\x88\x01Ra\x04\0\x88\x01Qa\x02`\x88\x01Ra\x04 \x88\x01Q\x81\x88\x01RPPPPa\x04@\x84\x01Qa\x02\xA0\x84\x01Ra\x04`\x84\x01Q\x81\x84\x01RPP\x80\x85RP` \x84\x01\x93P\x81\x81\x01\x90Pa\x0BiV[P\x90\x96\x95PPPPPPV[`\0\x80`@\x80\x84\x86\x03\x12\x15a\r/W`\0\x80\xFD[\x83Q`\x01`\x01`@\x1B\x03\x80\x82\x11\x15a\rFW`\0\x80\xFD[\x81\x86\x01\x91P\x86`\x1F\x83\x01\x12a\rZW`\0\x80\xFD[\x81Q` a\rja\x0B;\x83a\n\x94V[\x82\x81R`\x08\x92\x90\x92\x1B\x84\x01\x81\x01\x91\x81\x81\x01\x90\x8A\x84\x11\x15a\r\x89W`\0\x80\xFD[\x94\x82\x01\x94[\x83\x86\x10\x15a\x0E\x16Wa\x01\0\x86\x8C\x03\x12\x15a\r\xA8W`\0\x80\x81\xFD[a\r\xB0a\x08\xE8V[a\r\xB9\x87a\n\xB7V[\x81Ra\r\xC6\x84\x88\x01a\n\xB7V[\x81\x85\x01R\x86\x88\x01Q\x88\x82\x01R``\x80\x88\x01Q\x90\x82\x01R`\x80\x80\x88\x01Q\x90\x82\x01R`\xA0\x80\x88\x01Q\x90\x82\x01R`\xC0\x80\x88\x01Q\x90\x82\x01R`\xE0\x80\x88\x01Q\x90\x82\x01R\x82Ra\x01\0\x90\x95\x01\x94\x90\x82\x01\x90a\r\x8EV[\x91\x89\x01Q\x91\x97P\x90\x94PPP\x80\x83\x11\x15a\x0E/W`\0\x80\xFD[PPa\x0E=\x85\x82\x86\x01a\x0B\x1CV[\x91PP\x92P\x92\x90PV[`\0a\x05\x80\x82\x01\x90P`\x01`\x01`@\x1B\x03\x80\x85Q\x16\x83R\x80` \x86\x01Q\x16` \x84\x01RP`@\x84\x01Q`@\x83\x01R``\x84\x01Q``\x83\x01R`\x80\x84\x01Q`\x80\x83\x01R`\xA0\x84\x01Q`\xA0\x83\x01R`\xC0\x84\x01Q`\xC0\x83\x01R`\xE0\x84\x01Q`\xE0\x83\x01Ra\x01\0a\x0E\xC1\x81\x84\x01\x85Q\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[` \x84\x01Qa\x01@a\x0E\xDF\x81\x86\x01\x83\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[`@\x86\x01Q\x91Pa\x01\x80a\x0E\xFF\x81\x87\x01\x84\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[``\x87\x01Q\x92Pa\x01\xC0a\x0F\x1F\x81\x88\x01\x85\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[`\x80\x88\x01Q\x93Pa\x02\0a\x0F?\x81\x89\x01\x86\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[`\xA0\x89\x01Q\x94Pa\x02@a\x0F_\x81\x8A\x01\x87\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[`\xC0\x8A\x01Q\x95Pa\x02\x80a\x0F\x7F\x81\x8B\x01\x88\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[`\xE0\x8B\x01Q\x96Pa\x02\xC0a\x0F\x9F\x81\x8C\x01\x89\x80Q\x82R` \x90\x81\x01Q\x91\x01RV[\x97\x8B\x01Q\x80Qa\x03\0\x8C\x01R` \x90\x81\x01Qa\x03 \x8C\x01Ra\x01 \x8C\x01Q\x80Qa\x03@\x8D\x01R\x81\x01Qa\x03`\x8C\x01R\x95\x8B\x01Q\x80Qa\x03\x80\x8C\x01R\x86\x01Qa\x03\xA0\x8B\x01Ra\x01`\x8B\x01Q\x80Qa\x03\xC0\x8C\x01R\x86\x01Qa\x03\xE0\x8B\x01R\x93\x8A\x01Q\x80Qa\x04\0\x8B\x01R\x90\x94\x01Qa\x04 \x89\x01Ra\x01\xA0\x89\x01Qa\x04@\x89\x01R\x90\x88\x01Qa\x04`\x88\x01Ra\x01\xE0\x88\x01Qa\x04\x80\x88\x01R\x87\x01Qa\x04\xA0\x87\x01Ra\x02 \x87\x01Qa\x04\xC0\x87\x01R\x90\x86\x01Qa\x04\xE0\x86\x01Ra\x02`\x86\x01Qa\x05\0\x86\x01R\x85\x01Qa\x05 \x85\x01RPa\x02\xA0\x84\x01Qa\x05@\x84\x01R\x92\x90\x92\x01Qa\x05`\x90\x91\x01R\x91\x90PV[`@\x81R`\0a\x10\x97`@\x83\x01\x85a\n\x04V[\x90Pc\xFF\xFF\xFF\xFF\x83\x16` \x83\x01R\x93\x92PPPV[`\0` \x82\x84\x03\x12\x15a\x10\xBEW`\0\x80\xFD[PQ\x91\x90PV[`\0` \x82\x84\x03\x12\x15a\x10\xD7W`\0\x80\xFD[\x81Qa\t\xAD\x81a\x084V\xFEmock-consecutive-finalized-states\xA1dsolcC\0\x08\x17\0\n";
    /// The deployed bytecode of the contract.
    pub static CALLNEWFINALIZEDSTATE_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes =
        ::ethers::core::types::Bytes::from_static(__DEPLOYED_BYTECODE);
    pub struct CallNewFinalizedState<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for CallNewFinalizedState<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for CallNewFinalizedState<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for CallNewFinalizedState<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for CallNewFinalizedState<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(CallNewFinalizedState))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> CallNewFinalizedState<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(::ethers::contract::Contract::new(
                address.into(),
                CALLNEWFINALIZEDSTATE_ABI.clone(),
                client,
            ))
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                CALLNEWFINALIZEDSTATE_ABI.clone(),
                CALLNEWFINALIZEDSTATE_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `IS_SCRIPT` (0xf8ccbf47) function
        pub fn is_script(&self) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([248, 204, 191, 71], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `genesis` (0xa7f0b3de) function
        pub fn genesis(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            (
                u64,
                u64,
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
                ::ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash([167, 240, 179, 222], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `run` (0x83ded06e) function
        pub fn run(
            &self,
            num_blocks_per_epoch: u32,
            num_init_validators: u32,
            lc_contract_address: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [131, 222, 208, 110],
                    (
                        num_blocks_per_epoch,
                        num_init_validators,
                        lc_contract_address,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
        for CallNewFinalizedState<M>
    {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "IS_SCRIPT", abi = "IS_SCRIPT()")]
    pub struct IsScriptCall;
    ///Container type for all input parameters for the `genesis` function with signature `genesis()` and selector `0xa7f0b3de`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "genesis", abi = "genesis()")]
    pub struct GenesisCall;
    ///Container type for all input parameters for the `run` function with signature `run(uint32,uint32,address)` and selector `0x83ded06e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    #[ethcall(name = "run", abi = "run(uint32,uint32,address)")]
    pub struct RunCall {
        pub num_blocks_per_epoch: u32,
        pub num_init_validators: u32,
        pub lc_contract_address: ::ethers::core::types::Address,
    }
    ///Container type for all of the contract's call
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        serde::Serialize,
        serde::Deserialize,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub enum CallNewFinalizedStateCalls {
        IsScript(IsScriptCall),
        Genesis(GenesisCall),
        Run(RunCall),
    }
    impl ::ethers::core::abi::AbiDecode for CallNewFinalizedStateCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <IsScriptCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::IsScript(decoded));
            }
            if let Ok(decoded) = <GenesisCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Genesis(decoded));
            }
            if let Ok(decoded) = <RunCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Run(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for CallNewFinalizedStateCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::IsScript(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Genesis(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Run(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for CallNewFinalizedStateCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::IsScript(element) => ::core::fmt::Display::fmt(element, f),
                Self::Genesis(element) => ::core::fmt::Display::fmt(element, f),
                Self::Run(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<IsScriptCall> for CallNewFinalizedStateCalls {
        fn from(value: IsScriptCall) -> Self {
            Self::IsScript(value)
        }
    }
    impl ::core::convert::From<GenesisCall> for CallNewFinalizedStateCalls {
        fn from(value: GenesisCall) -> Self {
            Self::Genesis(value)
        }
    }
    impl ::core::convert::From<RunCall> for CallNewFinalizedStateCalls {
        fn from(value: RunCall) -> Self {
            Self::Run(value)
        }
    }
    ///Container type for all return fields from the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct IsScriptReturn(pub bool);
    ///Container type for all return fields from the `genesis` function with signature `genesis()` and selector `0xa7f0b3de`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash,
    )]
    pub struct GenesisReturn {
        pub view_num: u64,
        pub block_height: u64,
        pub block_comm_root: ::ethers::core::types::U256,
        pub fee_ledger_comm: ::ethers::core::types::U256,
        pub stake_table_bls_key_comm: ::ethers::core::types::U256,
        pub stake_table_schnorr_key_comm: ::ethers::core::types::U256,
        pub stake_table_amount_comm: ::ethers::core::types::U256,
        pub threshold: ::ethers::core::types::U256,
    }
}
