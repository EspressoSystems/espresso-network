searchState.loadedDescShard("staking_cli", 0, "Print the signer account address.\nApprove stake table contract to move tokens\nClaim withdrawal after validator exit.\nClaim withdrawal after an undelegation.\nCLI to interact with the Espresso stake table contract\nDisplay the current configuration\nDelegate funds to a validator.\nDeregister a validator.\nExport validator node signatures for address validation.\nInitialize the config file with deployment and wallet info.\nRemove the config file.\nRegister to become a validator.\nRegister the validators and delegates for the local demo.\nShow the stake table in the Espresso stake table contract.\nCheck ESP token allowance of stake table contract.\nCheck ESP token balance.\nTransfer ESP tokens\nInitiate a withdrawal of delegated funds from a validator.\nUpdate a validators Espresso consensus signing keys.\nDisplay version information of the staking-cli.\nThe mnemonic account index to use when deriving the key.\nCreate default Config\nCreate default SignerConfig\nCreate new object from &amp;mut Opt.\nCreate new object from Opt.\nReturns the argument unchanged.\nCreate new object from &amp;mut Opt.\nCreate new object from Opt.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse a ledger device to sign transactions.\nThe mnemonic to use when deriving the key.\nL1 Ethereum RPC.\nDeployed stake table contract address.\n[DEPRECATED] Deployed ESP token contract address.\nThe mnemonic account index to use when deriving the key.\nThe address to check.\nThe Ethereum address to sign.\nThe amount to transfer\nThe commission to charge delegators\nAbbreviate the very long BLS public keys.\nThe BLS private key for signing.\nDon’t ask for confirmation.\nThe block numberto use for the stake table.\nThe ledger account index to use when deriving the key.\nThe mnemonic to use when deriving the key.\nThe number of validators to register.\nThe address to check.\nThe Schnorr private key for signing.\nThe address to transfer to.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSetup validator by sending them tokens and ethers, and …\nRegister validators, and delegate to themselves for demo …\n<code>ToString::to_string</code>, but without panic on OOM.\nReturns the argument unchanged.\nNote: Generates random keys, the Ethereum key won’t …\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse a percentage string into a <code>Percentage</code> type.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nRead from file path with optional format override\nWrite to file with specified format\nSign using private keys\nClap arguments for node signature operations\nDestination for node signature output\nRepresents either keys for signing or a pre-prepared node …\nSource for pre-prepared NodeSignatures\nNode signatures containing pre-signed address signatures …\nOnly used for serialization to Solidity.\nClap arguments for output operations\nLoad from prepared node signature source\nSerialization formats supported by the CLI\nRead from stdin with specified format\nWrite to stdout with specified format\nThe Ethereum address that was signed\nThe Ethereum address that was signed\nBLS signature over the address\nBLS signature over the address\nBLS verification key\nBLS verification key\nThe consensus signing key. Used to sign a message to prove …\nCreate NodeSignatures by signing an Ethereum address with …\nInput format for stdin (auto-detected for files)\nOutput format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle output of the payload to the specified destination\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPath to file or “-” for stdin (format auto-detected)\nOutput file path. If not specified, outputs to stdout\nParse NodeSignatureSource from a PathBuf and optional …\nSchnorr signature over the address\nSchnorr signature over the address\nSchnorr verification key\nSchnorr verification key\nThe state signing key.\nVerify that the BLS and Schnorr signatures are valid for …")