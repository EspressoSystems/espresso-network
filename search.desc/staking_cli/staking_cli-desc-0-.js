searchState.loadedDescShard("staking_cli", 0, "Delegate funds to a validator. Approve stake table …\nClaim withdrawal after validator exit.\nClaim withdrawal after an undelegation.\nDeregister a validator.\nShow information about delegation, withdrawals, etc.\nInitialize the config file with a new mnemonic.\nRemove the config file.\nRegister to become a validator.\nRegister the validators and delegates for the local demo.\nCheck ESP token allowance of stake table contract.\nCheck ESP token balance.\nTransfer ESP tokens\nInitiate a withdrawal of delegated funds from a validator.\nCreate default Config\nCreate new object from Opt.\nReturns the argument unchanged.\nCreate new object from &amp;mut Opt.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nL1 Ethereum RPC.\nDeployed stake table contract address.\nDeployed ESP token contract address.\nThe address to check.\nThe amount to transfer\nThe commission to charge delegators\nAbbreviate the very long BLS public keys.\nThe consensus signing key. Used to sign a message to prove …\nDon’t ask for confirmation.\nThe block numberto use for the stake table.\nThe number of validators to register.\nThe address to check.\nThe state signing key.\nThe address to transfer to.\nRegister validators, and delegate to themselves for demo …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse a percentage string into a <code>Percentage</code> type.")