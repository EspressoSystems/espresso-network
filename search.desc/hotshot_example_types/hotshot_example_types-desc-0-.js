searchState.loadedDescShard("hotshot_example_types", 0, "block types\nImplementations for test memberships elections used for …\nnode types\nImplementations for testing/examples Implementations for …\nstorage types for hotshot storage\nadd a delay to async functions\nA <code>BlockHeader</code> that commits to <code>TestBlockPayload</code>.\nA <code>BlockPayload</code> that contains a list of <code>TestTransaction</code>.\nThe transaction in a <code>TestBlockPayload</code>.\nBlock number.\nFast commitment for builder verification\nGet reference to raw bytes of transaction\nEncode a list of transactions into bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a genesis block payload with bytes <code>vec![0]</code>, to be …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert transaction to raw vector of bytes\nblock metadata\nConstruct a new transaction\nVID commitment to the payload.\nrandom\nTimestamp when this header was created.\nTimestamp when this header was created.\nList of transactions.\nConstruct a new transaction. Returns <code>None</code> if <code>bytes.len()</code> &gt; …\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\ngeneral helpers\nleader completely randomized every view\nquorum randomized every view, with configurable overlap\nstatic (round robin) committee election\nstatic (round robin leader for 2 consecutive views) …\ntwo static (round robin) committees for even and odd epochs\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper which allows producing random numbers within a …\nTrait wrapping a config for quorum filters. This allows …\nProvides parameters to use the RandomOverlapQuorumIterator\nConstructs a quorum with a random number of members and …\nProvides parameters to use the StableQuorumIterator\nIterator which returns odd/even values for a given COUNT …\nDetermines how many possible values can be made for the …\nCount of nodes in the source quorum being filtered against\nCalled to run the filter and return a set of indices\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe next call to next() will emit the value with this …\nThe next call to next() will emit the value with this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a pair of PRNGs for the given SEED and ROUND. …\nCreate a single u64 seed by merging two u64s. Done this …\nMaximum value, open-ended. Numbers returned will be 0..max\nNumber of members to emit for the current round\nCreate a new NonRepeatValueIterator\nCreate a new StableQuorumIterator\nCreate a new RandomOverlapQuorumIterator\nOVERLAP of nodes to be carried over from the previous round\nOVERLAP of nodes to be carried over from the previous round\nPRNG from the previous round\nPRNG from the previous round\nHelper function to convert the arguments to a …\nRandom number generator to use\nCurrent ROUND\nCurrent ROUND\nHelper function to convert the arguments to a …\nPRNG for the current round\nPRNG for the current round\nValues which have already been emitted, to avoid duplicates\nThe randomized stake table election\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStake tables randomized with the DRB, used (only) for …\nWrites the offsets used for the quorum filter and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a set of indices into the da_stake_table which …\nCreates a set of indices into the stake_table which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStatic stake table that doesn’t use DRB results for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStatic stake table that doesn’t use DRB results for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCheck if a node has stake in the da committee\nCheck if a node has stake in the committee\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCombined Network implementation (libp2p + web server)\nLibp2p network implementation\nMemory network implementation\nThe Push CDN implementation\nfiller struct to implement node type and allow us to …\nfiller struct to implement node type and allow us to …\nfiller struct to implement node type and allow us to …\nfiller struct to implement node type and allow us to …\nfiller struct to implement node type and allow us to …\nWeb server network implementation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstance-level state implementation for testing purposes.\nApplication-specific state delta implementation for …\nValidated state implementation for testing purposes.\nthe block height\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthe previous state commitment\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>should_return_err</code> is a testing utility to validate …\nUpdate the current high QC in storage.\nSettings for each type\nWhat type of delay we want to apply to\nConfig for each supported type\nCurrent implementations that are supported for testing …\nIterator to iterate over enum\nImplement this method to add some delay to async call\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd a delay from settings\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLook for settings in the config and run it")