name: Test

on:
  push:
    branches:
      - main
      - release-*
    tags:
      # YYYYMMDD
      - "20[0-9][0-9][0-1][0-9][0-3][0-9]*"
  schedule:
    - cron: "0 0 * * 1"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_LOG: info,libp2p=off,node=error
  CARGO_TERM_COLOR: always
  # Save the process compose logs
  PC_LOGS: /tmp/pc.log

jobs:
  build-test-artifacts-postgres:
    name: Build test artifacts (postgres)
    runs-on: ubuntu-24.04-8core
    steps:
      - uses: rui314/setup-mold@v1

      - uses: actions/checkout@v4

      - name: Install nextest
        uses: taiki-e/install-action@nextest

      - name: Enable Rust Caching
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true
          cache-provider: github

      - name: Show memory
        run: free -h

      - name: Collect Workflow Telemetry
        uses: catchpoint/workflow-telemetry-action@v2
        with:
          comment_on_pr: false

      - name: Build and archive tests
        # hotshot-testing is tested in hotshot.yml, exclude from compilation
        run: cargo nextest archive --locked --workspace --exclude hotshot-testing --archive-file nextest-archive-postgres.tar.zst

      - name: Upload archive to workflow
        uses: actions/upload-artifact@v4
        with:
          name: nextest-archive-postgres
          path: nextest-archive-postgres.tar.zst

  build-test-artifacts-sqlite:
    name: Build test artifacts (sqlite)
    runs-on: ubuntu-24.04-8core
    steps:
      - uses: rui314/setup-mold@v1

      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install nextest
        uses: taiki-e/install-action@nextest

      - name: Enable Rust Caching
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true
          cache-provider: github

      - name: Show memory
        run: free -h

      - name: Collect Workflow Telemetry
        uses: catchpoint/workflow-telemetry-action@v2
        with:
          comment_on_pr: false

      - name: Build and archive tests
        # hotshot-testing is tested in hotshot.yml, exclude from compilation
        run: cargo nextest archive --locked --features "embedded-db testing" --workspace --exclude hotshot-testing --archive-file nextest-archive-sqlite.tar.zst

      - name: Upload archive to workflow
        uses: actions/upload-artifact@v4
        with:
          name: nextest-archive-sqlite
          path: nextest-archive-sqlite.tar.zst

  build-test-bins:
    name: Build test binaries
    runs-on: ubuntu-24.04-8core
    steps:
      - uses: rui314/setup-mold@v1

      - uses: actions/checkout@v4

      - name: Enable Rust Caching
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true
          cache-provider: github

      - name: Build Bins
        run: |
          cargo build --locked --profile test --bins
          cargo build --manifest-path ./sequencer-sqlite/Cargo.toml --target-dir ./target
        timeout-minutes: 60

      - name: Upload archive to workflow
        uses: actions/upload-artifact@v4
        with:
          name: test-binaries
          path: |
            target/debug/orchestrator
            target/debug/cdn-broker
            target/debug/cdn-marshal
            target/debug/cdn-whitelist
            target/debug/state-relay-server
            target/debug/state-prover
            target/debug/sequencer
            target/debug/cli
            target/debug/submit-transactions
            target/debug/reset-storage
            target/debug/utils
            target/debug/deploy
            target/debug/keygen
            target/debug/permissionless-builder
            target/debug/nasty-client
            target/debug/espresso-dev-node
            target/debug/pub-key
            target/debug/espresso-bridge
            target/debug/node-metrics
            target/debug/sequencer-sqlite
            target/debug/staking-cli

  test-postgres:
    needs: build-test-artifacts-postgres
    runs-on: ubuntu-latest
    strategy:
      matrix:
        partition: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      fail-fast: false
    steps:
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - uses: actions/checkout@v4

      - name: Install nextest
        uses: taiki-e/install-action@nextest
      - name: Download archive
        uses: actions/download-artifact@v4
        with:
          name: nextest-archive-postgres

      - name: Test
        run: |
          cargo nextest run --archive-file nextest-archive-postgres.tar.zst  --verbose --no-fail-fast \
          --workspace-remap $PWD \
          --partition hash:${{ matrix.partition }}/10
        timeout-minutes: 20

  test-sqlite:
    needs: build-test-artifacts-sqlite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        partition: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      fail-fast: false
    steps:
      - name: Fix submodule permissions check
        run: |
          git config --global --add safe.directory '*'

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install nextest
        uses: taiki-e/install-action@nextest
      - name: Download archive
        uses: actions/download-artifact@v4
        with:
          name: nextest-archive-sqlite

      - name: Test
        run: |
          cargo nextest run --archive-file nextest-archive-sqlite.tar.zst  --verbose --no-fail-fast \
          --workspace-remap $PWD \
          --partition hash:${{ matrix.partition }}/10
        timeout-minutes: 20

  test-integration:
    needs: [build-test-bins, build-test-artifacts-postgres]
    strategy:
      matrix:
        include:
          - test-name: test_native_demo_base
          - test-name: test_native_demo_pos_base
          - test-name: test_native_demo_pos_upgrade

      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Install Nix
        uses: cachix/install-nix-action@v31

      - name: Configure PATH
        run: PATH="$PWD/target/debug:$PATH"

      - uses: actions/checkout@v4

      - uses: taiki-e/install-action@nextest

      - name: Download archive
        uses: actions/download-artifact@v4

      - name: Move files
        run: |
          mv nextest-archive-postgres/* .
          mkdir -p target/debug
          mv test-binaries/* target/debug
          chmod -c +x target/debug/*

      # TODO: our demo fails with process-compose 1.63, pinning an older version until we figure it out
      - name: Install process-compose
        run: nix profile install nixpkgs/3730d8a308f94996a9ba7c7138ede69c1b9ac4ae#process-compose

      - name: Test Integration
        env:
          RUST_LOG: debug
          NEXTEST_PROFILE: integration
        run: |
          cargo nextest run --archive-file nextest-archive-postgres.tar.zst --verbose --no-fail-fast --nocapture \
          --workspace-remap $PWD ${{ matrix.test-name }}
        timeout-minutes: 60

      - name: Show end of logs
        if: always()
        run: |
          tail -n 1000 ${{ env.PC_LOGS }}

      - name: Upload process compose logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: process-compose-logs-integration-v${{ matrix.test-name  }}
          path: ${{ env.PC_LOGS }}


  demo-native:
    needs: build-test-bins
    runs-on: ubuntu-latest
    steps:
      - name: Install Nix
        uses: cachix/install-nix-action@v31

      - uses: actions/checkout@v4

      - name: Download archive
        uses: actions/download-artifact@v4
        with:
          name: test-binaries
          path: target/debug

      - name: chmod +x
        run: chmod -c +x target/debug/*

      # TODO: our demo fails with process-compose 1.63, pinning an older version until we figure it out
      - name: Install process-compose
        run: nix profile install nixpkgs/3730d8a308f94996a9ba7c7138ede69c1b9ac4ae#process-compose

      - name: Test Demo
        run: |
          export PATH="$PWD/target/debug:$PATH"
          set -o pipefail
          scripts/demo-native --tui=false &
          timeout -v 600 scripts/smoke-test-demo | sed -e 's/^/smoke-test: /;'

  # This job enables having a single required status check in github for all GCL tests.
  aggregate-gcl-tests:
    needs: [test-postgres, test-sqlite, demo-native, test-integration]
    runs-on: ubuntu-latest
    # explicitly run and fail the job if dependencies failed
    if: ${{ always() && !cancelled() }}
    steps:
      - name: Aggregate GCL test results
        run: |
          # useful for debugging
          echo "All results: ${{ toJson(needs) }}"

          if ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}; then
            echo "One or more jobs failed."
            exit 1
          else
            echo "All jobs succeeded."
            exit 0
          fi
