name: Build

on:
  push:
    branches:
      - main
      - release-*
    tags:
      # YYYYMMDD
      - "20[0-9][0-9][0-1][0-9][0-3][0-9]*"
  schedule:
    - cron: "0 0 * * 1"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_LOG: info,libp2p=off,node=error
  CARGO_TERM_COLOR: always
  DOCKER_PLATFORMS: ${{ github.event_name == 'pull_request' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}

jobs:
  build-matrix:
    name: Build ${{ matrix.binary }} on ${{ matrix.arch }}
    # runs-on: ${{ matrix.arch == 'x86_64' && 'ubuntu-24.04-8core' || 'buildjet-8vcpu-ubuntu-2204-arm' }}
    runs-on: ${{ matrix.arch == 'x86_64' && 'ubuntu-latest' || 'buildjet-8vcpu-ubuntu-2204-arm' }}
    if: ${{ matrix.arch == 'x86_64' || github.event_name != 'pull_request' }}
    strategy:
      matrix:
        arch: [x86_64, aarch64]
        binary: [sequencer, sequencer-sqlite, espresso-dev-node, other]

    steps:
      - uses: rui314/setup-mold@v1

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Enable Rust Caching
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v1-rust
          shared-key: build
          save-if: ${{ github.ref == 'refs/heads/main' }}
          cache-provider: ${{ matrix.arch == 'x86_64' && 'github' || 'buildjet' }}

      - name: Build ${{ matrix.binary }}
        run: |
          case "${{ matrix.binary }}" in
            "sequencer")
              cargo build --locked --release --bin sequencer
              ;;
            "sequencer-sqlite")
              cargo build --locked --release --manifest-path ./sequencer-sqlite/Cargo.toml
              ;;
            "espresso-dev-node")
              cargo build --locked --release --features "embedded-db testing" --bin espresso-dev-node
              ;;
            "other")
              cargo build --locked --release --workspace \
                --exclude sequencer \
                --exclude espresso-dev-node \
                --exclude sequencer-sqlite
              ;;
          esac

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.arch }}-${{ matrix.binary }}
          path: |
            target/release/${{ matrix.binary == 'other' && '*' || matrix.binary }}

  build-dockers:
    runs-on: ubuntu-latest
    # This is non-deterministic, a limitation of GHA. We but we only need the
    # tag like (:main) at the end which is the same for each matrix build.
    outputs:
      tags: ${{ steps.metadata.outputs.tags }}
    strategy:
      matrix:
        service:
          - bridge
          - builder
          - cdn-broker
          - cdn-marshal
          - cdn-whitelist
          - deploy
          - espresso-dev-node
          - nasty-client
          - node-validator
          - orchestrator
          - prover-service
          - sequencer
          - staking-cli
          - state-relay-server
          - submit-transactions

    needs: [build, build-arm]
    # if build_arm is skipped, run this job anyway
    if: ${{ !(failure() || cancelled()) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download executables AMD
        uses: actions/download-artifact@v4
        with:
          pattern: x86_64-*
          path: target/amd64/release
          merge_multiple: true

      - name: Download executables ARM
        if: github.event_name != 'pull_request'
        uses: actions/download-artifact@v4
        with:
          pattern: aarch64-*
          path: target/arm64/release
          merge_multiple: true

      - name: Setup QEMU
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/setup-qemu-action@v3
        with:
          # Temporary fix (See https://github.com/docker/setup-qemu-action/issues/198)
          image: tonistiigi/binfmt:qemu-v7.0.0-28

      - name: Setup Docker BuildKit (buildx)
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Repo
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate ${{ matrix.service }} docker metadata
        uses: docker/metadata-action@v5
        id: metadata
        with:
          images: ghcr.io/espressosystems/espresso-sequencer/${{ matrix.service }}

      # There is no straightforward way to import a multiplatform image from a tar file with
      # docker.
      #   - On PRs: build only amd64 and upload as artifact to later run the demo test.
      #   - On main: push to the registry and fetch from the registry to run the demo test.

      - name: Build and push ${{ matrix.service }} docker image (non-PR)
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/${{ matrix.service }}.Dockerfile
          platforms: ${{ env.DOCKER_PLATFORMS }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels  }}
          outputs: type=registry

      - name: Build and export ${{ matrix.service }} docker image (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/${{ matrix.service }}.Dockerfile
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels  }}
          outputs: type=docker,dest=${{ runner.temp }}/${{ matrix.service }}.tar

      - name: Upload artifact (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-docker-image
          path: ${{ runner.temp }}/${{ matrix.service }}.tar
          if-no-files-found: error

  test-demo:
    # if build_arm is skipped, run this job anyway
    if: ${{ !(failure() || cancelled()) }}
    runs-on: ubuntu-latest
    needs: [build-dockers]
    steps:
      - uses: taiki-e/install-action@just

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifacts (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/docker-images
          pattern: "*-docker-image"

      - name: Load docker images (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          # load all *.tar files in the temp directory, the layout should
          # be ${{ runner.temp }}/docker-images/<artifact-name>/<service>.tar
          for file in $(find ${{ runner.temp }}/docker-images -name "*.tar"); do
            docker load --input $file
          done

      - name: Match the docker image tag built or pushed to the registry
        run: |
          DOCKER_TAG=$(echo ${{ needs.build-dockers.outputs.tags }} | sed 's/.*://')
          echo DOCKER_TAG=$DOCKER_TAG >> $GITHUB_ENV

      - name: Pull remaining docker images
        run: |
          docker compose pull --policy missing

      - name: Test docker demo
        run: |
          just demo --pull never &
          set -o pipefail
          timeout -v 600 scripts/smoke-test-demo | sed -e 's/^/smoke-test: /;'
