name: Build

on:
  push:
    # TODO: FOR TESTING, restore branch gating
    # branches:
    #   - main
    #   - release-*
    tags:
      # YYYYMMDD
      - "20[0-9][0-9][0-1][0-9][0-3][0-9]*"
  schedule:
    - cron: "0 0 * * 1"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_LOG: info,libp2p=off,node=error
  CARGO_TERM_COLOR: always

jobs:
  build-amd:
    name: Build ${{ matrix.binary }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - binary: sequencer
            shared-key: postgres
            save-cache: false

          - binary: other
            shared-key: postgres
            save-cache: true

          - binary: sequencer-sqlite
            # uses it's own lock file
            shared-key: sequencer-embedded
            save-cache: true

          - binary: espresso-dev-node
            # uses differend features testing,emdbedded-db
            shared-key: espresso-dev-node
            save-cache: true

    steps:
      - uses: rui314/setup-mold@v1

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Enable Rust Caching
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v3-rust
          shared-key: ${{ matrix.shared-key }}
          save-if: >
            ${{ matrix.save-cache && (
            github.ref == 'refs/heads/main'
            || startsWith(github.ref, 'refs/heads/release-')
            || github.event_name == 'workflow_dispatch' ) }}
          cache-provider: github

      - name: Build ${{ matrix.binary }}
        run: |
          scripts/ci-build-binary ${{ matrix.binary }}

      - name: Move binaries to upload directory
        shell: bash
        run: |
          mkdir -p upload
          for item in target/release/*; do
            if [[ -f "$item" && -x "$item" ]]; then
              mv -v "$item" ./upload
              continue
            fi
          done

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: amd-${{ matrix.binary }}
          path: |
            upload/${{ matrix.binary == 'other' && '*' || matrix.binary }}

  build-arm:
    name: Build ${{ matrix.binary }}
    runs-on: buildjet-8vcpu-ubuntu-2204-arm
    if: ${{ github.event_name != 'pull_request' }}
    strategy:
      matrix:
        include:
          - binary: sequencer
            shared-key: postgres
            save-cache: false

          - binary: other
            shared-key: postgres
            save-cache: true

          - binary: sequencer-sqlite
            # uses it's own lock file
            shared-key: sequencer-embedded
            save-cache: true

          - binary: espresso-dev-node
            # uses differend features testing,emdbedded-db
            shared-key: espresso-dev-node
            save-cache: true

    steps:
      - uses: rui314/setup-mold@v1

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Enable Rust Caching
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v3-rust
          shared-key: ${{ matrix.shared-key }}
          save-if: >
            ${{ matrix.save-cache && (
            github.ref == 'refs/heads/main'
            || startsWith(github.ref, 'refs/heads/release-')
            || github.event_name == 'workflow_dispatch' ) }}
          cache-provider: buildjet

      - name: Build ${{ matrix.binary }}
        run: |
          scripts/ci-build-binary ${{ matrix.binary }}

      - name: Move binaries to upload directory
        run: |
          mkdir -p upload
          for item in target/release/*; do
            if [[ -f "$item" && -x "$item" ]]; then
              mv -v "$item" ./upload
              continue
            fi
          done

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: arm-${{ matrix.binary }}
          path: |
            upload/${{ matrix.binary == 'other' && '*' || matrix.binary }}

  build-dockers-amd:
    needs: build-amd
    runs-on: ubuntu-latest
    # This is non-deterministic, a limitation of GHA. We but we only need the
    # tag like (:main) at the end which is the same for each matrix build.
    outputs:
      tags: ${{ steps.metadata.outputs.tags }}
    strategy:
      matrix:
        service:
          - bridge
          - builder
          - cdn-broker
          - cdn-marshal
          - cdn-whitelist
          - deploy
          - espresso-dev-node
          - nasty-client
          - node-validator
          - orchestrator
          - prover-service
          - sequencer
          - staking-cli
          - state-relay-server
          - submit-transactions

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download executables AMD
        uses: actions/download-artifact@v4
        with:
          pattern: amd-*
          path: target/amd64/release
          merge-multiple: true

      - name: Setup Docker BuildKit (buildx)
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Repo
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate ${{ matrix.service }} docker metadata
        uses: docker/metadata-action@v5
        id: metadata
        with:
          images: ghcr.io/espressosystems/espresso-sequencer/${{matrix.service}}

      # There is no straightforward way to import a multiplatform image from a tar file with
      # docker.
      #   - On PRs: build only amd64 and upload as artifact to later run the demo test.
      #   - On main: push to the registry and fetch from the registry to run the demo test.
      - name: Build docker image and export to file (on PRs)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/${{ matrix.service }}.Dockerfile
          labels: ${{ steps.metadata.outputs.labels  }}
          platforms: linux/amd64
          outputs: type=docker,dest=${{ runner.temp }}/${{ matrix.service }}.tar

      - name: Upload docker image artifact (on PRs)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-docker-image
          path: ${{ runner.temp }}/${{ matrix.service }}.tar
          if-no-files-found: error

      - name: Build and push docker (non-PR)
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        id: build
        with:
          context: .
          file: ./docker/${{ matrix.service }}.Dockerfile
          labels: ${{ steps.metadata.outputs.labels  }}
          platforms: linux/amd64
          outputs: type=image,name=ghcr.io/espressosystems/espresso-sequencer/${{ matrix.service }},push-by-digest=true,name-canonical=true,push=true

      - name: Export docker image digest
        if: github.event_name != 'pull_request'
        shell: bash
        run: |
          set -x
          digest_dir="${{ runner.temp }}/digests"
          mkdir -p "${digest_dir}"
          digest="${{ steps.build.outputs.digest }}"
          touch "${digest_dir}/${digest#sha256:}"
          ls -lah "${digest_dir}"

      - name: Upload digest
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: "digests-amd64"
          path: "${{ runner.temp }}/digests/*"
          if-no-files-found: error
          retention-days: 1

  build-dockers-arm:
    # Arm builds cost money, skip on PRs
    if: github.event_name != 'pull_request'
    needs: build-arm
    runs-on: buildjet-2vcpu-ubuntu-2204-arm
    # This is non-deterministic, a limitation of GHA. We but we only need the
    # tag like (:main) at the end which is the same for each matrix build.
    # outputs:
    #   tags: ${{ steps.metadata.outputs.tags }}
    strategy:
      matrix:
        service:
          - bridge
          - builder
          - cdn-broker
          - cdn-marshal
          - cdn-whitelist
          - deploy
          - espresso-dev-node
          - nasty-client
          - node-validator
          - orchestrator
          - prover-service
          - sequencer
          - staking-cli
          - state-relay-server
          - submit-transactions

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download executables ARM
        uses: actions/download-artifact@v4
        with:
          pattern: arm-*
          path: target/arm64/release
          merge-multiple: true

      - name: Setup Docker BuildKit (buildx)
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Repo
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate ${{ matrix.service }} docker metadata
        uses: docker/metadata-action@v5
        id: metadata
        with:
          images: ghcr.io/espressosystems/espresso-sequencer/${{ matrix.service }}

      - name: Build and push docker
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          file: ./docker/${{ matrix.service }}.Dockerfile
          labels: ${{ steps.metadata.outputs.labels  }}
          platforms: linux/arm64
          outputs: type=image,name=ghcr.io/espressosystems/espresso-sequencer/${{  matrix.service }},push-by-digest=true,name-canonical=true,push=true


      - name: Export docker image digest
        shell: bash
        run: |
          set -x
          digest_dir="${{ runner.temp }}/digests"
          mkdir -p "${digest_dir}"
          digest="${{ steps.build.outputs.digest }}"
          touch "${digest_dir}/${digest#sha256:}"
          ls -lah "${digest_dir}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: "digests-arm64"
          path: "${{ runner.temp }}/digests/*"
          if-no-files-found: error
          retention-days: 1

  # Merge the AMD64 and ARM64 images into the final (multiplatform) image.
  #
  # For documentation refer to
  # https://docs.docker.com/build/ci/github-actions/multi-platform/#distribute-build-across-multiple-runners
  create-multiplatform-docker-image:
    if: github.event_name != 'pull_request'
    needs: [build-dockers-amd, build-dockers-arm]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - bridge
          - builder
          - cdn-broker
          - cdn-marshal
          - cdn-whitelist
          - deploy
          - espresso-dev-node
          - nasty-client
          - node-validator
          - orchestrator
          - prover-service
          - sequencer
          - staking-cli
          - state-relay-server
          - submit-transactions

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Repo
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner  }}
          password: ${{ secrets.GITHUB_TOKEN  }}

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: "digests-*"
          path: "${{ runner.temp }}/digests"
          merge-multiple: true

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/espressosystems/espresso-sequencer/${{ matrix.service }}

      - name: Create manifest list and push
        working-directory: "${{ runner.temp }}/digests"
        run: |
          # Count the number of files in the directory
          file_count=$(find . -type f | wc -l)

          if [ "$file_count" -ne 2 ]; then
            echo "Should have exactly 2 digests to combine, something went wrong"
            ls -lah
            exit 1
          fi

          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'ghcr.io/espressosystems/espresso-sequencer/${{ matrix.service }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ghcr.io/espressosystems/espresso-sequencer/${{ matrix.service }}:${{ steps.meta.outputs.version }}

  test-demo:
    runs-on: ubuntu-latest
    needs: [build-dockers-amd]
    steps:
      - uses: taiki-e/install-action@just

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifacts (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/docker-images
          pattern: "*-docker-image"

      - name: Load docker images (PR only)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          # load all *.tar files in the temp directory, the layout should
          # be ${{ runner.temp }}/docker-images/<artifact-name>/<service>.tar
          for file in $(find ${{ runner.temp }}/docker-images -name "*.tar"); do
            docker load --input $file
          done

      - name: Match the docker image tag built or pushed to the registry
        run: |
          DOCKER_TAG=$(echo ${{ needs.build-dockers.outputs.tags }} | sed 's/.*://')
          echo DOCKER_TAG=$DOCKER_TAG >> $GITHUB_ENV

      - name: Pull remaining docker images
        run: |
          docker compose pull --policy missing

      - name: Test docker demo
        run: |
          just demo --pull never &
          set -o pipefail
          timeout -v 600 scripts/smoke-test-demo | sed -e 's/^/smoke-test: /;'
