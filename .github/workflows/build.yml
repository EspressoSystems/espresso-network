name: Build

on:
  push:
    branches:
      - main
      - release-*
    tags:
      # YYYYMMDD
      - "20[0-9][0-9][0-1][0-9][0-3][0-9]*"
  schedule:
    - cron: "0 0 * * 1"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_LOG: info,libp2p=off,node=error
  CARGO_TERM_COLOR: always
  DOCKER_PLATFORMS: ${{ github.event_name == 'pull_request' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
  ARTIFACT_PATHS: |
    target/release/cdn-broker
    target/release/cdn-marshal
    target/release/cdn-whitelist
    target/release/cli
    target/release/deploy
    target/release/dev-rollup
    target/release/espresso-bridge
    target/release/espresso-dev-node
    target/release/keygen
    target/release/marketplace-builder
    target/release/marketplace-solver
    target/release/nasty-client
    target/release/node-metrics
    target/release/orchestrator
    target/release/permissionless-builder
    target/release/pub-key
    target/release/reset-storage
    target/release/sequencer
    target/release/sequencer-sqlite
    target/release/staking-cli
    target/release/state-prover
    target/release/state-relay-server
    target/release/submit-transactions
    target/release/update-permissioned-stake-table
    target/release/utils

jobs:
  build:
    runs-on: buildjet-8vcpu-ubuntu-2204
    steps:
      - uses: rui314/setup-mold@v1

      - name: Install just command runner
        run: |
          sudo snap install --edge --classic just
          just --version

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Enable Rust Caching
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v1-rust
          cache-provider: buildjet

      - name: Build
        # Build in release without `testing` feature, this should work without `hotshot_example` config.
        run: |
          cargo build --locked --release --workspace
      
      - name: Build sequencer-sqlite 
        run: cargo build --locked --release --manifest-path ./sequencer-sqlite/Cargo.toml --target-dir ./target

      - name: Build Espresso Dev Node
        # Espresso Dev Node currently requires testing feature, so it is built separately.
        run: |
          cargo build --locked --release --features "testing embedded-db" --bin espresso-dev-node

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: x86_64-unknown-linux-gnu-services
          path: ${{ env.ARTIFACT_PATHS }}

  build-arm:
    if: github.event_name != 'pull_request'
    runs-on: buildjet-8vcpu-ubuntu-2204-arm
    env:
      CARGO_BUILD_JOBS: '6'
    steps:
      - uses: rui314/setup-mold@v1

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Enable Rust Caching
        uses: Swatinem/rust-cache@v2
        with:
          cache-provider: buildjet

      - name: Build
        run: |
          cargo build --locked --release --workspace

      - name: Build sequencer-sqlite 
        run: cargo build --locked --release --manifest-path ./sequencer-sqlite/Cargo.toml --target-dir ./target

      - name: Build Espresso Dev Node
        # Espresso Dev Node currently requires testing feature, so it is built separately.
        run: |
          cargo build --locked --release --features "embedded-db testing" --bin espresso-dev-node

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: aarch64-unknown-linux-gnu-services
          path: ${{ env.ARTIFACT_PATHS }}

  build-dockers:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - bridge
          - builder
          - cdn-broker
          - cdn-marshal
          - cdn-whitelist
          - deploy
          - dev-rollup
          - espresso-dev-node
          - marketplace-builder
          - marketplace-solver
          - nasty-client
          - node-validator
          - orchestrator
          - prover-service
          - sequencer
          - staking-cli
          - state-relay-server
          - submit-transactions
          - update-permissioned-stake-table

    needs: [build, build-arm]
    # if build_arm is skipped, run this job anyway
    if: ${{ !(failure() || cancelled()) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download executables AMD
        uses: actions/download-artifact@v4
        with:
          name: x86_64-unknown-linux-gnu-services
          path: target/amd64/release

      - name: Download executables ARM
        if: github.event_name != 'pull_request'
        uses: actions/download-artifact@v4
        with:
          name: aarch64-unknown-linux-gnu-services
          path: target/arm64/release

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          # Temporary fix (See https://github.com/docker/setup-qemu-action/issues/198)
          image: tonistiigi/binfmt:qemu-v7.0.0-28

      - name: Setup Docker BuildKit (buildx)
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Repo
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate ${{ matrix.service }} docker metadata
        uses: docker/metadata-action@v5
        id: metadata
        with:
          images: ghcr.io/espressosystems/espresso-sequencer/${{ matrix.service }}

      - name: Build and push ${{ matrix.service }} docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/${{ matrix.service }}.Dockerfile
          platforms: ${{ env.DOCKER_PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels  }}

  test-demo:
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    needs: [build-dockers]
    steps:
      - name: Install just command runner
        run: |
          sudo snap install --edge --classic just
          just --version

      - name: Checkout Repository
        uses: actions/checkout@v4

      # TODO: MA: not sure this works, but if not, why not?
      - name: Pull docker images
        run: |
          just pull

      - name: Test docker demo
        run: |
          just demo &
          set -o pipefail
          timeout -v 600 scripts/smoke-test-demo | sed -e 's/^/smoke-test: /;'
