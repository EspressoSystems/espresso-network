name: ARM64 Build

on:
  push:
    branches:
      - main
    tags:
      # YYYYMMDD
      - "20[0-9][0-9][0-1][0-9][0-3][0-9]"
  pull_request:
  schedule:
    - cron: "0 1 * * 1"
  workflow_dispatch:

env:
  RUST_TEST_THREADS: 1

jobs:
  arm-build:
    runs-on: [self-hosted, arm64]
    container:
      image: ghcr.io/espressosystems/nix:main
      volumes:
        - github_nix:/nix
    steps:
      - uses: styfle/cancel-workflow-action@0.11.0
        name: Cancel Outdated Builds
        with:
          access_token: ${{ github.token }}

      - uses: cachix/cachix-action@v12
        with:
          name: espresso-systems-private
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - uses: actions/checkout@v3
        name: Checkout Repository

      - name: Work around git issue after git CVE-2022-24765 fix.
        run: git config --global --add safe.directory "$PWD"

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
            target
          # todo: add nix key, for example:  nix-instantiate shell.nix | sha256sum  | head -c 10
          key: arm-sequencer-v0-${{ hashFiles('Cargo.lock') }}

      - name: Build all executables
        run: nix develop .#rustShell --command cargo build --release

      - uses: actions/upload-artifact@v3
        with:
          name: arm-executables
          path: |
            target/release/cdn-server
            target/release/sequencer
            target/release/example-l2
            target/release/cli

  arm-dockers:
    runs-on: ubuntu-latest
    needs: arm-build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download executables
        uses: actions/download-artifact@v3
        with:
          name: arm-executables
          path: target/release

      - name: Set linker/loader to not be nix
        run: |
          patchelf --set-interpreter /lib64/ld-linux-x86-64.so.2 ./target/release/cdn-server
          patchelf --set-interpreter /lib64/ld-linux-x86-64.so.2 ./target/release/sequencer
          patchelf --set-interpreter /lib64/ld-linux-x86-64.so.2 ./target/release/example-l2
          patchelf --set-interpreter /lib64/ld-linux-x86-64.so.2 ./target/release/cli

      - uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Login to Github Container Repo
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate sequencer docker metadata
        uses: docker/metadata-action@v4
        id: sequencer
        with:
          images: ghcr.io/espressosystems/espresso-sequencer/sequencer

      - name: Generate cdn-server docker metadata
        uses: docker/metadata-action@v4
        id: cdn-server
        with:
          images: ghcr.io/espressosystems/espresso-sequencer/cdn-server

      - name: Generate example rollup metadata
        uses: docker/metadata-action@v4
        id: example-rollup
        with:
          images: ghcr.io/espressosystems/espresso-sequencer/example-rollup

      - name: Build and push sequencer docker
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./docker/sequencer.Dockerfile
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.sequencer.outputs.tags }}
          labels: ${{ steps.sequencer.outputs.labels }}

      - name: Build and push cdn-server docker
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./docker/cdn-server.Dockerfile
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.cdn-server.outputs.tags }}
          labels: ${{ steps.cdn-server.outputs.labels }}

      - name: Build and push example-rollup docker
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./docker/example-rollup.Dockerfile
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.example-rollup.outputs.tags }}
          labels: ${{ steps.example-rollup.outputs.labels }}
