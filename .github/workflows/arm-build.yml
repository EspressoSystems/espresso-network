# This file is almost identical to build_static.yml, the main difference is that
# the target system for cross compilation is aarch64.
#
# When we have time we could use
# https://docs.github.com/en/actions/using-workflows/reusing-workflows to make a
# single workflow out of it.
#
# The config that differs:
#
# nix dev shell: {.#crossShell,.#armCrossShell}
# Platform: {linux/amd64,arm64}
# Name of the artifact: {aarch64,x86_64}-unknown-linux-musl-services
name: Static ARM Build

on:
  push:
    branches:
      - main
      - release-*
    tags:
      # YYYYMMDD
      - "20[0-9][0-9][0-1][0-9][0-3][0-9]*"
  schedule:
    - cron: "0 0 * * 1"
  pull_request:
  workflow_dispatch:

jobs:
  static-arm-build:
    runs-on: self-hosted
    container:
      image: ghcr.io/espressosystems/nix:main
      volumes:
        - github_nix:/nix
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - uses: cachix/cachix-action@v12
        # If PR is from a non-collaborator (e. g. dependabot) the secrets are missing and the login to cachix fails.
        continue-on-error: true
        with:
          name: espresso-systems-private
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          extraPullNames: nix-community

      - name: Cache cargo
        uses: actions/cache@v3.3.1
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
            target
          key: espresso-sequencer-arm-static-v1-${{ hashFiles('Cargo.lock') }}

      - name: Fix Git Security Issue
        run: git config --global --add safe.directory "$PWD"

      - name: Compile all executables
        # timeout-minutes: 120
        run: |
          nix develop .#armCrossShell --accept-flake-config --option sandbox relaxed -c cargo build --release

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: aarch64-unknown-linux-musl-services
          path: |
            target/aarch64-unknown-linux-musl/release/cdn-server
            target/aarch64-unknown-linux-musl/release/sequencer
            target/aarch64-unknown-linux-musl/release/example-l2
            target/aarch64-unknown-linux-musl/release/cli

  static-arm-dockers:
    runs-on: ubuntu-latest
    needs: static-arm-build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download executables
        uses: actions/download-artifact@v3
        with:
          name: aarch64-unknown-linux-musl-services
          path: target/release

      - name: Setup Docker BuildKit (buildx)
        uses: docker/setup-buildx-action@v2

      - name: Login to Github Container Repo
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate sequencer docker metadata
        uses: docker/metadata-action@v4
        id: sequencer
        with:
          images: ghcr.io/espressosystems/espresso-sequencer/sequencer

      - name: Generate cdn-server docker metadata
        uses: docker/metadata-action@v4
        id: cdn-server
        with:
          images: ghcr.io/espressosystems/espresso-sequencer/cdn-server

      - name: Generate example rollup metadata
        uses: docker/metadata-action@v4
        id: example-rollup
        with:
          images: ghcr.io/espressosystems/espresso-sequencer/example-rollup

      - name: Build and push sequencer docker
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./docker/sequencer.Dockerfile
          platforms: arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.sequencer.outputs.tags }}
          labels: ${{ steps.sequencer.outputs.labels }}

      - name: Build and push cdn-server docker
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./docker/cdn-server.Dockerfile
          platforms: arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.cdn-server.outputs.tags }}
          labels: ${{ steps.cdn-server.outputs.labels }}

      - name: Build and push example-rollup docker
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./docker/example-rollup.Dockerfile
          platforms: arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.example-rollup.outputs.tags }}
          labels: ${{ steps.example-rollup.outputs.labels }}
